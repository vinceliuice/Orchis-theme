
/***************
 * Base States *
 ***************/
.background {
  background-color: $background;
  color: $text;
}

dnd {
  color: on($background);
}

.normal-icons {
  -gtk-icon-size: 16px;
}

.large-icons {
  -gtk-icon-size: 32px;
}

.lowres-icon:not(.large-icons) {
  -gtk-icon-size: 16px;
}

.symbolic-circular {
  background-color: $fill;
  border-radius: $circular-radius;
  padding: 0;
  min-height: 32px;
  min-width: 32px;
}

spinner:disabled,
arrow:disabled,
scrollbar:disabled,
check:disabled,
radio:disabled,
treeview.expander:disabled { -gtk-icon-filter: opacity(0.5); }

%view, .view {
  background-color: $base;
  color: $text;

  &:disabled { color: $text-disabled; }

  &:selected {
    @extend %selected_items_color;
  }
}

textview {
  // FIXME: we need to override background-color to ensure text rendering

  text {
    background-color: $base;
    selection { &:focus, & { @extend %selected_items_primary; }}
  }

  border {
    background-color: $base-alt;
    color: $text-secondary; // FIXME: not working
  }
}

iconview {
  @extend %view;
  &:hover, &:selected { border-radius: $corner-radius / 2; }
}

rubberband {
  @if $gnome_version == 'new' and $accent_type != "fixed" {
    --accent-bg-color: @accent_bg_color;
  }

  border: 1px solid $primary;
  background-color: color-mix(in srgb, $primary 30%, transparent);
}

flowbox {
  > rubberband { @extend rubberband; }

  > flowboxchild {
    padding: 4px;
    border-radius: $corner-radius;

    &:selected { @extend %selected_items_color; }

    button.remove-button.osd {
      min-height: $small-size;
      min-width: $small-size;
      padding: $space-size;
    }
  }
}

.content-view .tile {
  &:selected {
    background-color: transparent;
  }
}

gridview {
  > rubberband { @extend rubberband; }

  > child {
    padding: 3px;

    &:selected {
      outline-color: $overlay-selected;

      @extend %selected_items;
    }

    box { //cells
      border-spacing: 2px; //label separation
      margin: 3px;
    }
  }
}

coverflow cover {
  color: $text;
  background-color: $base;
  border: 1px solid black;
}

label {
  &.separator {
    color: $text-secondary;
  }

  > selection { @extend %selected_items_primary; }

  &:disabled {
    opacity: 1;
    filter: none;
    // color: $text-disabled;

    // selection { color: $text-disabled; }

    row &,
    headerbar &,
    tab &,
    button & { color: inherit; }
  }

  &.osd {
    border-radius: $corner-radius;
    background-color: $tooltip;
    color: on($tooltip);
  }
}

%dim-label, .dim-label {
  color: $text-disabled;
  opacity: 1;
}

.accent {
  color: $primary;
}

.success {
  color: $success;
}

.warning {
  color: $warning;
}

.error {
  color: $error;
}

window.assistant {
  .sidebar {
    padding: 4px 0;
  }

  .sidebar label {
    min-height: $medium-size;
    padding: 0 12px;
    color: $text-disabled;
    font-weight: 500;

    &.highlight { color: $text; }
  }
}

%osd {
  color: on($base);
  background-color: $base;
  background-clip: padding-box;
  border-radius: $corner-radius;
  border: none;
}

.osd {
  @extend %osd;
  padding: $space-size;
  margin: $space-size;
  box-shadow: $shadow-z6;

  &.circular { border-radius: $circular-radius; }
}


/*********************
 * Spinner Animation *
 *********************/
@keyframes spin {
  to { transform: rotate(1turn); }
}

spinner {
  background: none;
  opacity: 0; // non spinning spinner makes no sense
  -gtk-icon-source: -gtk-icontheme('process-working-symbolic');

  &:checked {
    opacity: 1;
    animation: spin 1s linear infinite;

    &:disabled { opacity: 0.5; }
  }
}

// General Typography
.large-title {
  font-weight: 300;
  font-size: 24pt;
}

.title {
  &-1 {
    font-weight: 800;
    font-size: 20pt;
  }

  &-2 {
     font-weight: 800;
     font-size: 15pt;
  }

  &-3 {
    font-weight: 700;
    font-size: 15pt;
  }

  &-4 {
    font-weight: 700;
    font-size: 13pt;
  }
}

.heading {
  font-weight: 700;
  font-size: 11pt;
}

.body {
  font-weight: 400;
  font-size: 11pt;
}

.caption {
  font-weight: 400;
  font-size: 9pt;

  &-heading {
    font-weight: 700;
    font-size: 9pt;
  }
}

/****************
 * Text Entries *
 ****************/

%entry-basic {
  caret-color: currentColor; // this shouldn't be needed.

  @include entry(normal);
  &:focus-within { @include entry(checked); }
  &:not(:disabled):not(:focus-within):hover, &:drop(active) { @include entry(hover); }
  &:disabled { @include entry(disabled); }

  > text {
    > placeholder {
      @extend .dim-label;
    }

    > block-cursor {
      color: $background;
      background-color: $text;
    }
  }

  > image {
    color: $text-secondary;

    &:hover, &:active { color: $text; }

    &:disabled { color: $text-disabled; }
  }
}

entry {
  min-height: $medium-size;
  padding: 0 $space-size + 2px;
  border-spacing: $space-size;
  border-radius: $corner-radius;
  @extend %entry-basic;

  // &.search { border-radius: $circular-radius; }

  &.flat {
    min-height: 0;
    padding: 2px;
    border-radius: 0;
    background-color: transparent;
  }

  image { // icons inside the entry
    &.left {
      margin-left: ($medium-size - 16px) / 2 - 8px;
      margin-right: 6px;
    }

    &.right {
      margin-left: 6px;
      margin-right: ($medium-size - 16px) / 2 - 8px;
    }
  }

  undershoot {
    &.left { @include undershoot(left); }

    &.right { @include undershoot(right); }
  }

  > text > selection { @extend %selected_items_primary; }

  // entry error and warning style
  @each $e_type, $e_color in (error, $error),
                             (success, $success),
                             (warning, $warning) {
    &.#{$e_type} {
      @include entry(normal, $e_color);

      selection {
        color: on($e_color);
        background-color: $e_color;
      }

      &:not(:disabled):not(:focus-within):hover, &:drop(active) { @include entry(hover, $e_color); }

      &:focus-within { @include entry(checked, $e_color); }

      &:disabled { @include entry(disabled, $e_color); }

      > text {
        > placeholder {
          color: rgba($e_color, 0.35);
        }
    
        > block-cursor {
          color: $e_color;
          background-color: on($e_color);
        }
      }

      > image {
        color: rgba($e_color, 0.8);

        &:hover, &:active { color: $e_color; }

        &:disabled { color: rgba($e_color, 0.35); }
      }
    }
  }

  > progress,
  progress > trough > progress {
    margin: 2px -8px;
    border-bottom: 2px solid $primary;
    background-color: transparent;
  }

   // linked entries
  .linked:not(.vertical) > & { @extend %linked; }

  // Vertically linked entries
  .linked.vertical > & { @extend %linked-vertical; }
}

treeview entry {
  &.flat, & {
    background-color: $base;

    &, &:focus-within {
      border-image: none;
      box-shadow: none;
    }
  }
}

.entry-tag {
  margin: 2px;
  border-radius: $circular-radius;
  box-shadow: none;
  background-color: $track-disabled;
  color: $text;

  &:hover { background-image: image($overlay-hover); }

  // side margins: compensate the entry padding with a negative margin
  // then the negative margin itself
  :dir(ltr) & {
    margin-left: 4px;
    margin-right: 0;
    padding-left: 12px;
    padding-right: 8px;
  }

  :dir(rtl) & {
    margin-left: 0;
    margin-right: 4px;
    padding-left: 8px;
    padding-right: 12px;
  }

  // seems any sizing doesn't work
  &.button {
    box-shadow: none;
    background-color: transparent;

    &:not(:hover):not(:active) { color: $text-secondary; }
  }
}

// Editable Labels
editablelabel > stack > text {
  @include entry(normal);
}

/***********
 * Buttons *
 ***********/
// stuff for .needs-attention
@keyframes needs-attention {
  from { background-image: radial-gradient(farthest-side, $primary 0%, transparent 0%); }
  to { background-image: radial-gradient(farthest-side, $primary 95%, transparent); }
}

%button-on-dark {
  color: on(dark, secondary);

  &:focus, &:hover, &:active, &:checked { color: on(dark); }
  &:disabled { color: on(dark, secondary-disabled); }
  &:checked:disabled { color: on(dark, disabled); }
}

%button-basic {
  @include button(normal);

  &:focus { @include button(focus); }

  &:hover { @include button(hover); }

  &:active { @include button(active); }

  &:disabled { @include button(disabled); }

  &:checked { @include button(checked); }

  &:checked:hover { @include button(checked-hover); }

  &:checked:disabled { @include button(checked-disabled); }
}

button {
  min-height: 24px;
  min-width: 24px;
  padding: ($medium-size - 24px) / 2;
  border-radius: $corner-radius;
  font-weight: 500;
  @extend %button-basic;

  &:drop(active) { @include button(hover); }

  @at-root %button-flat, &.flat {
    @at-root %button-flat-simple, & {
      @include button(flat-normal);

      &:focus { @include button(flat-focus); }

      &:hover { @include button(flat-hover); }

      &:active { @include button(flat-active); }

      &:disabled { @include button(flat-disabled); }
    }

    &:checked, &:checked:hover { @include button(flat-checked); }

    &:checked:disabled { @include button(flat-checked-disabled); }
  }

  &.text-button {
    min-width: 32px;
    padding-left: 16px;
    padding-right: 16px;

    &.flat {
      min-width: 48px;
      padding-left: 8px;
      padding-right: 8px;
    }
  }

  &.image-button {
    min-width: 24px;
    padding: ($medium-size - 24px) / 2;

    @extend %circular-button;
  }

  // NOTE: Some image-only buttons use this as well
  &.text-button.image-button {
    min-width: 24px;
    padding: ($medium-size - 24px) / 2;
    border-radius: $corner-radius;

    label {
      &:first-child { margin-left: 16px - ($medium-size - 24px) / 2; }

      &:last-child { margin-right: 16px - ($medium-size - 24px) / 2; }
    }

    &.flat label {
      &:first-child { margin-left: 12px - ($medium-size - 24px) / 2; }

      &:last-child { margin-right: 12px - ($medium-size - 24px) / 2; }
    }

    image:not(:only-child) { margin: 0 (24px - 16px) / 2; }
  }

  .linked:not(.vertical) > &,
  .linked:not(.vertical) > &.image-button {
    @extend %linked;
  }

  .linked.vertical > &,
  .linked.vertical > &.image-button {
    @extend %linked-vertical;
  }

  .linked:not(.vertical) > &.flat,
  .linked.vertical > &.flat {
    &:not(:only-child) { // specificity bump
      border-radius: $corner-radius;

      // &.image-button:not(.text-button) { border-radius: $circular-radius; }
    }

    &:focus { box-shadow: inset 0 0 0 2px $overlay-focus; }
  }

  .linked:not(.vertical) > menubutton:first-child > & {
    border-radius: $corner-radius 0 0 $corner-radius;
  }

  .linked:not(.vertical) > menubutton:last-child > & {
    border-radius: 0 $corner-radius $corner-radius 0;
  }

  // big standalone buttons like in Documents pager
  &.osd {
    min-height: 24px;
    min-width: 24px;
    padding: $space-size;
    box-shadow: none;
    background-color: rgba(black, 0.5);
    border: none;
    background-clip: padding-box;
    color: rgba(white, 0.85);

    &:hover { background-color: rgba(black, 0.65); color: white; }

    &:active { background-color: rgba(black, 0.75); color: white; }

    // &.image-button { padding: $space-size; }

    &:disabled { opacity: 0; color: rgba(white, 0.35); }
  }

  // Suggested and Destructive Action buttons
  @each $b_type, $b_color in (suggested-action, $suggested),
                             (destructive-action, $destructive) {
    &.#{$b_type} {
      background-color: $b_color;
      color: on($b_color);
      box-shadow: none;

      &:disabled {
        color: rgba(on($b_color), 0.45);
        background-color: rgba($b_color, 0.25);
      }

      &:hover {
        color: on($b_color);
        background-color: mix(on($b_color), $b_color, percentage(0.1));
        box-shadow: none;
      }

      &:active {
        color: on($b_color);
        background-color: mix(on($b_color), $b_color, percentage(0.2));
      }

      &:checked { background-color: mix(on($b_color), $b_color, percentage(0.15)); }

      &:focus { box-shadow: 0 0 0 2px rgba($b_color, 0.35); }

      &.flat {
        background-color: transparent;
        color: $b_color;

        &:disabled {
          color: rgba(on($b_color), 0.45);
          background-color: transparent;
        }

        &:checked { background-color: rgba($b_color, 0.3); }
      }
    }
  }

  stackswitcher > & {
    // to position the needs attention dot, padding is added to the button
    // child, a label needs just lateral padding while an icon needs vertical
    // padding added too.

    > label {
      margin: 0 -6px;
      padding: 0 6px;
    }

    > image {
      margin: -3px -6px;
      padding: 3px 6px;
    }

    &.needs-attention {
      > label,
      > image { @extend %needs-attention; }

      &:checked {
        > label,
        > image {
          animation: none;
          background-image: none;
        }
      }
    }
  }

  // hide separators
  &.font,
  &.file {
    separator { @extend %hide_separators; }

    > box { border-spacing: $space-size; }
    > box > box > label { font-weight: bold; }
  }

  @at-root %circular-button,
  &.close,
  &.circular { // The Bloody Circul Button
    border-radius: $circular-radius;

    label { padding: 0; }
  }

  @at-root %small-button {
    min-height: $small-size;
    min-width: $small-size;
    padding: 0;
    border-radius: $circular-radius;
  }
}

%needs-attention {
  animation: needs-attention $ripple-fade-in-duration $ease-out forwards;
  background-repeat: no-repeat;
  background-position: right 3px;
  background-size: 6px 6px;

  &:dir(rtl) { background-position: left 3px; }
}

%linked {
  border-radius: 0;

  &:first-child {
    border-top-left-radius: $corner-radius;
    border-bottom-left-radius: $corner-radius;
  }

  &:last-child {
    border-top-right-radius: $corner-radius;
    border-bottom-right-radius: $corner-radius;
  }

  &:only-child {
    border-radius: $corner-radius;
  }
}

%linked-vertical {
  border-radius: 0;

  &:first-child {
    border-top-left-radius: $corner-radius;
    border-top-right-radius: $corner-radius;
  }

  &:last-child {
    border-bottom-left-radius: $corner-radius;
    border-bottom-right-radius: $corner-radius;
  }

  &:only-child {
    border-radius: $corner-radius;
  }
}

button.color {
  min-height: $small-size;
  min-width: $small-size;
  padding: $space-size;
}

%list_button,
list > row button.image-button:not(.flat) {
  background-color: transparent;
  box-shadow: none;
  border: none;
  &:hover { @include button(hover); }
  &:active,
  &:checked { @include button(active); }

  @each $b_type, $b_color in (suggested-action, $suggested),
                             (destructive-action, $destructive) {
    &.#{$b_type} { // allow colored buttons in lists #3643
      background-color: $b_color;
      color: on($b_color);
    }
  }
}

/*********
 * Links *
 *********/
link, %links {
  color: $link;

  &:visited {
    color: $link-visited;
  }
}

button.link {
  &:link {
    &, &:focus, &:hover, &:active { color: $link; }
  }

  &:visited {
    &, &:focus, &:hover, &:active { color: $link-visited; }
  }

  > label { text-decoration-line: underline; }
}

/*****************
 * GtkSpinButton *
 *****************/
spinbutton {
  @include entry(normal);
  &:focus-within { @include entry(checked); }
  &:disabled { @include entry(disabled); }
  border-radius: $corner-radius;
  padding: 0;
  border-spacing: 0;

  > text {
    margin: 0;
    border-image: none;
    border-radius: 0;
    box-shadow: none;
    background-color: transparent;
  }

  > button.image-button.up,
  > button.image-button.down {
    @extend %button-flat-simple;
    @extend %small-button;
    padding: 0;
    margin: $space-size;
    border: none;

    // Remove unwanted focus indicator
    &:focus:not(:hover):not(:active):not(:disabled) {
      background-color: transparent;
      color: $text-secondary;
      outline: none;
      box-shadow: none;
    }
  }

  &:not(.vertical) {
    // in this horizontal configuration, the whole spinbutton
    // behaves as the entry, so we extend the entry styling
    // and nuke the style on the internal entry

    > text {
      min-width: $large-size - 16px;
      // reset all the other props since the spinbutton node is styled here
      padding-left: $space-size * 2;
    }

    > button {
      &.up:dir(ltr),
      &.down:dir(rtl) { margin-left: $space-size / 2; }

      &.up:dir(rtl),
      &.down:dir(ltr) { margin-right: $space-size / 2; }
    }
  }

  // Vertical
  &.vertical {
    &:disabled { color: $text-disabled; }

    > text {
      min-height: $medium-size;
      min-width: $large-size - $space-size;
      padding: 0;
    }

    > button.image-button.up,
    > button.image-button.down {
      margin: $space-size;
      min-width: $large-size - $space-size * 3;
      min-height: $large-size - $space-size * 3;
    }
  }

  // Misc
  // treeview &:not(.vertical),
  list > row &:not(.vertical) {
    > button {
      margin: $space-size;

      &.up:dir(ltr),
      &.down:dir(rtl) { margin-left: $space-size / 2; }

      &.up:dir(rtl),
      &.down:dir(ltr) { margin-right: $space-size / 2; }
    }
  }
}


/**************
 * ComboBoxes *
 **************/

dropdown > button {
  > box {
    border-spacing: $space-size;
  }

  label { margin-left: $space-size; }
}

dropdown,
combobox {
  arrow {
    -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
    min-height: 16px;
    min-width: 16px;
  }

  // align menu labels with the button label
  > popover.menu {
    margin-top: $space-size;
    padding: 0;
  }

  button.combo cellview {
    &:dir(ltr) { margin-left: 8px - ($medium-size - 16px) / 2; }
    &:dir(rtl) { margin-right: 8px - ($medium-size - 16px) / 2; }
  }

  &.linked {
    button:nth-child(2) {
      &:dir(ltr) {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
      }
      &:dir(rtl) {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
      }
    }
  }

  > .linked:not(.vertical) > entry:not(:only-child) {
    border-radius: $corner-radius;

    &:first-child {
      margin-right: -$medium-size;
      padding-right: $medium-size;
    }

    &:last-child {
      margin-left: -$medium-size;
      padding-left: $medium-size;
    }
  }

  > .linked:not(.vertical) > button:not(:only-child) {
    @extend %button-flat;
    // @extend %small-button;

    min-height: 16px;
    min-width: 16px;
    margin: ($medium-size - $small-size) / 2;
    padding: ($small-size - 16px) / 2;
    border-radius: $corner-radius;
  }
}

// the combo is a composite widget so the way we do button linking doesn't
// work, special case needed. See
// https://bugzilla.gnome.org/show_bug.cgi?id=733979

.linked:not(.vertical) > combobox {
  &:not(:first-child) > box > button.combo {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }

  &:not(:last-child) > box > button.combo {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }
}

.linked.vertical > combobox {
  &:not(:first-child) > box > button.combo {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
  }

  &:not(:last-child) > box > button.combo {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
  }
}

button.combo:only-child {
  border-radius: $corner-radius;
  font-weight: normal;

  @include entry(normal);

  &:focus { @include button(flat-focus); }

  &:hover { @include button(flat-hover); }

  &:active { @include button(flat-active); }

  &:checked { @include button(flat-checked); }

  &:disabled { @include button(disabled); }
}

%toolbar_osd {
  transition: $transition-shadow;
  padding: $space-size;
  border-radius: $corner-radius;
  box-shadow: $shadow-z4, inset 0 1px highlight($surface);
  background-color: $surface;
  color: $text;

  &:backdrop {
    box-shadow: $shadow-z2, inset 0 1px highlight($surface);
    color: $text-disabled;
  }
}

/************
 * Toolbars *
 ************/
.toolbar,
toolbar {
  padding: $space-size;
  background-color: $background;
  border-spacing: 0;

  > button { @extend %button-flat; }

  button.pill { padding: ($medium-size - 24px) / 2 32px; }

  // on OSD
  .osd & { background-color: transparent; }

  // stand-alone OSD toolbars
  &.osd {
    @extend %toolbar_osd;

    &.left,
    &.right,
    &.top,
    &.bottom { border-radius: 0; } // positional classes for `attached` osd toolbars

    &.bottom {
      box-shadow: none;
      background-color: transparent;
      background-image: linear-gradient(to bottom,
                                        transparent,
                                        rgba(black, 0.1) 30%,
                                        rgba(black, 0.2) 50%,
                                        rgba(black, 0.4));
    }
  }

  // toolbar separators
  &.horizontal > separator { margin: 2px; }
  &.vertical > separator { margin: 2px; }

  &:not(.inline-toolbar):not(.osd) {
    switch { margin: 2px + $space-size 2px; }
  }
}

.toolbar {
  > button {
    border-radius: $corner-radius / 2;
  }

  .bottom-bar & {
    padding: $space-size;

    button { border-radius: $corner-radius; }
  }
}

// searchbar
searchbar > revealer > box {
  padding: $space-size;
  border-spacing: 0;
  border-style: solid;
  border-width: 0 0 1px;
  border-color: $divider;
  background-color: $background;
  background-clip: border-box;
  box-shadow: none;

  entry,
  button,
  menubutton,
  splitbutton { margin: 0; }
}

/***************
 * Header bars *
 ***************/

%titlebar-button-reset {
  color: $text-secondary;

  &:focus, &:hover, &:active, &:checked { color: $text; }

  &:disabled { color: $text-secondary-disabled; }

  &:checked {
    &:disabled {
      background-color: transparent;
      color: $text-disabled;
    }
  }

  &:backdrop {
    color: $text-disabled;

    &:focus, &:hover, &:active { color: $text-secondary; }

    &:disabled { color: $text-secondary-disabled; }

    &:checked {
      color: $text-secondary;

      &:disabled { color: $text-secondary-disabled; }
    }
  }
}

%titlebar-button {
  color: $titlebar-text-secondary;

  &:focus, &:hover, &:active, &:checked { color: $titlebar-text; }

  &:disabled { color: $titlebar-text-secondary-disabled; }

  &:checked {
    &:disabled {
      background-color: transparent;
      color: $titlebar-text-disabled;
    }
  }

  &:backdrop {
    color: $titlebar-text-disabled;

    &:focus, &:hover, &:active { color: $titlebar-text-secondary; }

    &:disabled { color: $titlebar-text-secondary-disabled; }

    &:checked {
      color: $titlebar-text-secondary;

      &:disabled { color: $titlebar-text-secondary-disabled; }
    }
  }
}

%titlebar-entry-reset {
  caret-color: $text;

  &, &:drop(active), &:focus-within {
    color: $text;
  }

  &:not(:disabled):not(:focus-within):hover {
    color: $text;
  }

  &:disabled {
    color: $text-disabled;
  }

  > text {
    > placeholder {
      color: $text-disabled;
    }

    > block-cursor {
      color: $text;
      background-color: $base;
    }
  }

  > image {
    color: $text-secondary;

    &:hover, &:active { color: $text; }

    &:disabled { color: $text-disabled; }
  }
}

%titlebar-entry {
  caret-color: $titlebar-text;

  &, &:drop(active), &:focus-within {
    color: $titlebar-text;
  }

  &:not(:disabled):not(:focus-within):hover {
    color: $titlebar-text;
  }

  &:disabled {
    color: $titlebar-text-disabled;
  }

  > text {
    > placeholder {
      color: $titlebar-text-disabled;
    }

    > block-cursor {
      color: $titlebar;
      background-color: $titlebar-text;
    }
  }

  > image {
    color: $titlebar-text-secondary;

    &:hover, &:active { color: $titlebar-text; }

    &:disabled { color: $titlebar-text-disabled; }
  }
}

headerbar {
  transition: background-color $duration $ease-out, color $duration $ease-out;
  box-shadow: inset 0 -1px $divider, inset 0 1px highlight($titlebar);
  color: $titlebar-text;
  min-height: $large-size;
  padding: 0;
  margin: 0;
  background-color: $titlebar;
  border-radius: $window-radius $window-radius 0 0;

  &:disabled { color: $titlebar-text-disabled; }

  &:backdrop {
    color: $titlebar-text-secondary;
    background-color: $titlebar-backdrop;
    filter: none;

    > windowhandle {
      filter: none;
      transition: none;
    }

    &:disabled { color: $titlebar-text-secondary-disabled; }
  }

  .info &,
  .about &,
  &.flat {
    color: $text;

    &, &:backdrop {
      background-color: transparent;
      box-shadow: inset 0 1px highlight($titlebar);
    }

    .subtitle,
    .dim-label {
      color: $text-secondary;
  
      &:backdrop { color: $text-disabled; }
    }

    @if $mac_style == 'true' {
      button:not(.suggested-action):not(.destructive-action):not(.close):not(.maximize):not(.minimize) {
        @extend %titlebar-button-reset;
      }
    } @else {
      button:not(.suggested-action):not(.destructive-action) {
        @extend %titlebar-button-reset;
      }
    }
  }

  .title {
    padding: 0 $space-size * 2;
    font-weight: bold;
  }

  .subtitle {
    padding: 0 $space-size * 2;
    font-size: smaller;
  }

  .subtitle,
  .dim-label {
    transition: color $duration $ease-out;
    color: $titlebar-text-secondary;

    &:backdrop { color: $titlebar-text-disabled; }
  }

  // Don't draw titlebar above titlebar
  headerbar {
    background-color: transparent;
    box-shadow: none;
  }

  splitbutton {
    border-radius: $circular-radius;

    > button,  > menubutton > button {
      min-height: 24px;
      min-width: 24px;
      padding: ($medium-size - 24px) / 2;
      border-radius: $circular-radius;
    }

    > button:dir(ltr),
    > menubutton > button:dir(rtl) {
      border-top-right-radius: $circular-radius;
      border-bottom-right-radius: $circular-radius;
    }

    > button:dir(rtl),
    > menubutton > button:dir(ltr) {
      border-top-left-radius: $circular-radius;
      border-bottom-left-radius: $circular-radius;
    }
  }

  entry {
    @extend %titlebar-entry;
  }

  .linked:not(.vertical) > entry:not(:only-child) { border-radius: $corner-radius; }

  button:not(.suggested-action):not(.destructive-action) {
    @extend %button-flat;
    @extend %titlebar-button;
  }

  .linked:not(.vertical) > button:not(.suggested-action):not(.destructive-action) {
    border-radius: $circular-radius;
  }

  button.suggested-action,
  button.destructive-action {
    &:disabled {
      background-color: $titlebar-fill;
      color: $titlebar-text-disabled;
    }
  }

  button.toggle { border-radius: $circular-radius; }

  popover.background { // reset
    @if $variant == 'light' and $topbar == 'dark' {
      color: $text;

      > contents {
        color: $text;

        .dim-label { color: $text-secondary; }
      }

      button:not(.suggested-action):not(.destructive-action) {
        @extend %button-basic;

        &.flat {
          @extend %button-flat;
        }

        image { color: $text; }
      }

      entry { @extend %entry-basic; }
    }

    button, entry, spinbutton {
      border-radius: $menuitem-radius;
    }

    .linked:not(.vertical) > button:not(.suggested-action):not(.destructive-action) {
      border-radius: 0;

      &:first-child { border-radius: $menuitem-radius 0 0 $menuitem-radius; }
      &:last-child { border-radius: 0 $menuitem-radius $menuitem-radius 0; }
      &:only-child { border-radius: $menuitem-radius; }
    }
  }

  stackswitcher { // reset
    border-radius: $circular-radius;

    &.linked:not(.vertical) > button:not(.suggested-action):not(.destructive-action).text-button {
      border-radius: $circular-radius;
      color: $titlebar-text-secondary;

      &:focus, &:hover, &:active { color: $titlebar-text; }

      &:disabled { color: $titlebar-text-secondary-disabled; }

      &:checked {
        color: $primary-text;

        &:disabled {
          color: $primary-text-disabled;
        }
      }

      &:backdrop {
        color: $titlebar-text-disabled;

        &:focus, &:hover, &:active { color: $titlebar-text-secondary; }

        &:disabled { color: $titlebar-text-secondary-disabled; }

        &:checked {
          color: $primary-text-disabled;

          &:disabled { color: $primary-text-secondary-disabled; }
        }
      }
    }
  }

  > windowhandle > box {
    padding: $space-size;

    &,
    > box.start,
    > box.end {
      border-spacing: $space-size;
    }

    &, > widget {
      > box.start:dir(ltr),
      > box.end:dir(rtl) {
        margin-right: $space-size;
      }

      > box.start:dir(rtl),
      > box.end:dir(ltr) {
        margin-left: $space-size;
      }
    }
  }

  switch {
    margin-top: ($large-size - 30px) / 2;
    margin-bottom: ($large-size - 30px) / 2;
  }

  &.selection-mode {
    // 0.1ms was a workaround for https://gitlab.gnome.org/GNOME/gtk/issues/698
    // but let's keep it for backwards compatibility.
    transition: background-color 0.1ms $ripple-fade-in-duration, color $duration $ease-out;
    animation: ripple-on-headerbar $ripple-fade-in-duration $ease-out;
    box-shadow: inset 0 1px $primary-divider;
    background-color: $primary;
    color: $primary-text;

    &:backdrop {
      color: $primary-text-secondary;
    }

    .subtitle:link { color: $primary-text; }

    button:not(.suggested-action):not(.destructive-action) {
      @extend %button-on-dark;
    }

    .selection-menu {
      padding-left: 16px;
      padding-right: 16px;

      .arrow { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
    }
  }

  .selection-mode {
    box-shadow: inset 0 1px $primary-divider; // Avoid double shadows
    background-color: $primary;
  }

  // squared corners when the window is maximized, tiled, or fullscreen
  .tiled &,
  .tiled-top &,
  .tiled-right &,
  .tiled-bottom &,
  .tiled-left &,
  .maximized &,
  .fullscreen & {
    border-radius: 0;
    box-shadow: inset 0 -1px $divider;
  }

  &.default-decoration {
    min-height: $small-size;
    padding: 0;
    background-image: none;
    background-color: $titlebar;
    border-radius: $window-radius $window-radius 0 0;
    box-shadow: inset 0 1px highlight($titlebar);

    .tiled &,
    .maximized &,
    .fullscreen & {
      box-shadow: none;
      border-radius: 0;
    }

    > windowhandle > box {
      padding: 0 $space-size;
    }

    windowcontrols {
      button,
      menubutton {
        padding: 0;

        @if $mac_style == 'true' {
          min-height: 16px;
          min-width: 16px;
          padding: ($small-size - 16px) / 2 0;
          margin: 0 $space-size - 2px;
        } @else {
          min-height: $small-size;
          min-width: $small-size;
          margin: $space-size 0;
        }
      }
    }
  }

  .solid-csd & {
    &:dir(rtl), &:dir(ltr) { // specificity bump
      border-radius: 0;
      box-shadow: none; // just remove the highlight
    }
  }
}

window.devel {
  headerbar > windowhandle {
    background-image: cross-fade(5% -gtk-recolor(url("assets/scalable/devel-symbolic.svg")), image(transparent));
    background-repeat: repeat-x;
  }
}

//
// Window buttons
//

%mac_window_button {
  min-height: 16px;
  min-width: 16px;
  padding: ($medium-size - 16px) / 2 0;
  margin-left: $space-size - 2px;
  margin-right: $space-size - 2px;

  &.minimize, &.maximize, &.close {
    color: transparent;

    &, &:hover, &:active {
      box-shadow: none;
      background-color: transparent;
      background-image: none;
      transition: none;
      animation: none;
    }

    &:hover, &:active {
      color: white;
    }

    &:backdrop {
      color: transparent;

      > image { background-color: $titlebar-track; }

      &:hover, &:active {
        color: $titlebar-text-disabled;
      }
    }
  }

  &.minimize { // Window minimize button
    > image { background-color: $titlebutton-min; }

    &:active > image {
      background-color: mix(black, $titlebutton-min, 25%);
    }
  }

  &.maximize { // Window maximize button
    > image { background-color: $titlebutton-max; }

    &:active > image {
      background-color: mix(black, $titlebutton-max, 25%);
    }
  }

  &.close { // Window close button
    > image { background-color: $titlebutton-close; }

    &:active > image {
      background-color: mix(black, $titlebutton-close, 25%);
    }
  }
}

$window-space: if($mac_style == 'true', $space-size * 1.5, $space-size);

headerbar windowcontrols {
  border-spacing: $space-size;

  @if $mac_style == 'true' {
    padding: 0 $space-size;
  }

  &.start:dir(ltr),
  &.end:dir(rtl) {
    margin-right: $space-size;
  }

  &.start:dir(rtl),
  &.end:dir(ltr) {
    margin-left: $space-size;
  }

  button:not(.suggested-action):not(.destructive-action) {
    @extend %circular-button;

    @if $mac_style == 'true' {
      @extend %mac_window_button;

      > image {
        border-radius: 100%;
        padding: 0;
        border: none;
        outline: none;
        box-shadow: none;
      }
    } @else {
      > image {
        padding: 0;
        border: none;
        outline: none;
        box-shadow: none;
        background-color: transparent;
        background-image: none;
      }
    }
  }
}

/************
 * Pathbars *
 ************/
%pathbar_button,
pathbar > button {
  padding-left: ($medium-size - 24px) / 2;
  padding-right: ($medium-size - 24px) / 2;
  border-radius: $corner-radius;
  border-spacing: $space-size / 2;

  label, image {
    margin-left: $space-size / 2;
    margin-right: $space-size / 2;
  }

  label:not(:only-child) {
    &:first-child { margin-left: 0; }
    &:last-child { margin-right: 0; }
  }

  &.text-button {
    min-width: 0;
  }

  &.slider-button {
    padding-left: (24px - 16px) / 2;
    padding-right: (24px - 16px) / 2;
  }
}

.pathbar {
  background-color: $fill;
  color: $text-secondary;
  border: none;
  border-radius: $corner-radius;
  padding: 2px;

  headerbar & {
    margin-top: $space-size;
    margin-bottom: $space-size;
    background-color: on($titlebar, fill);
    color: $titlebar-text-secondary;
  }

  > button {
    margin-top: 0;
    margin-bottom: 0;
    min-height: 20px;
    border-radius: $corner-radius - 2px;
    border: none;
    box-shadow: none;

    &:last-child {
      @include button(flat-checked);
    }
  }
}


/**************
 * Tree Views *
 **************/
columnview.view,
treeview.view {
  border-left-color: $solid-border; // this is actually the tree lines color,
  border-top-color: $solid-border; // while this is the grid lines color, better then nothing

  // FIXME: Avoid transparency background-color being slightly darker
  &:selected {
    background-color: $base;
    background-image: image($overlay-checked);
    box-shadow: none;
    color: $primary;
  }

  > rubberband { @extend rubberband; } // to avoid borders being overridden by the previously set props

  &:hover, &:selected {
    border-radius: 0;
    box-shadow: none;
  }

  &.separator {
    min-height: 1px + 2px * 2;
    color: $divider;
  }

  // FIXME: box-shadow, background-color and background-image are not available here.
  &:drop(active) {
    box-shadow: none;

    &.after { border-top-style: none; }

    &.before { border-bottom-style: none; }
  }

  > dndtarget:drop(active) {
    border-style: solid none;
    border-width: 1px;
    border-color: $overlay-selected;

    &.after { border-top-style: none; }

    &.before { border-bottom-style: none; }
  }

  &.expander {
    min-width: 16px;
    min-height: 16px;
    color: $text-secondary;
    -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');

    &:dir(rtl) { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic-rtl'); }

    &:checked { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }

    &:hover { color: $text; }

    &:selected {
      color: $primary;

      &:hover { color: rgba($primary, 0.65); }
    }

    &:disabled { color: $text-secondary-disabled; }
  }

  &.progressbar { // progress bar in treeviews
    border-bottom: $bar-size solid $primary;
    box-shadow: none;
    background-color: transparent;
    background-image: none;

    &:selected:hover { box-shadow: none; }
  }

  &.trough { // progress bar trough in treeviews
    border-bottom: $bar-size solid $track-disabled;
    box-shadow: none;
    background-color: transparent;
    background-image: none;

    &:selected:hover { box-shadow: none; }
  }

  > header {
    > button {
      @extend %row_activatable;

      padding: 2px 6px;
      border-style: none solid solid none;
      border-width: 1px;
      border-color: $divider;
      border-radius: 0;
      background-clip: border-box;

      &:not(:focus):not(:hover):not(:active) { color: $text-secondary; }

      &, &:disabled { background-color: $base; }

      &:last-child { border-right-style: none; }

      sort-indicator {
        &.ascending {
          -gtk-icon-source: -gtk-icontheme('pan-up-symbolic');
        }

        &.descending {
          -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
        }

        min-height: 16px;
        min-width: 16px;
      }
    }
  }

  button.dnd,
  header.button.dnd { // for treeview-like derive widgets
    padding: 2px 6px;
    border-style: none solid solid;
    border-width: 1px;
    border-color: $divider;
    border-radius: 0;
    box-shadow: none;
    background-color: $base;
    background-clip: border-box;
    color: $primary;
  }

  acceleditor > label { background-color: $primary; } // see tests/testaccel to test
}


/*********
 * Menus *
 *********/
menubar {
  padding: 0;
  // box-shadow: inset 0 -1px $divider;
  background-color: $titlebar;
  color: $titlebar-text;

  &:backdrop {
    background-color: $titlebar-backdrop;
    color: $titlebar-text-secondary;
  }

  .csd & { transition: $transition; }

  > item {
    transition: $transition;
    min-height: 20px;
    padding: 4px 8px;
    color: $titlebar-text-secondary;

    &:selected { // Seems like it :hover even with keyboard focus
      transition: none;
      background-color: $overlay-checked;
      color: $titlebar-text;
    }

    &:disabled { color: $titlebar-text-secondary-disabled; }

    label:disabled { color: inherit; } // to inherit the above color
  }

  //nested submenus
  & > item popover.menu popover.menu {
    margin-left: $space-size * 1.5;
  }

  & > item popover.menu.background popover.menu.background > contents {
    margin: 0;
  }
}


/**********************
 * Popover Base Menus *
 **********************/

popover.menu {
  box.inline-buttons {
    padding: 0 $space-size + 8px;

    button.image-button.model {
      min-height: $menuitem-size;
      min-width: $menuitem-size;
      padding: 0;
      border: none;
      outline: none;
      transition: none;

      &:selected { background-image: image($overlay-selected); }
    }
  }

  box.circular-buttons {
    padding: $space-size;

    button.circular.image-button.model {
      @extend %small-button;
      padding: $space-size;

      &:focus {
        background-color: $overlay-selected;
      }
    }
  }

  arrow.left,
  radio.left,
  check.left {
    margin-left: 0;
    margin-right: 0;
  }

  arrow.right,
  radio.right,
  check.right {
    margin-left: 0;
    margin-right: 0;
  }

  label.title {
    font-weight: bold;
    padding: $space-size / 2 ($space-size + 6px) * 2 + $space-size + 2px; //this will fall apart with font sizing
  }
}


/************
 * Popovers *
 ************/

popover.background {
  font: initial;
  padding: 0;
  color: $text;

  &, &:backdrop {
    background-color: transparent;
  }

  > arrow,
  > contents {
    transition: $transition-shadow;
    padding: $space-size;
    box-shadow: $shadow-z6; // TODO: this should really have a highlight
    background-color: $surface;
    border: none;
    border-radius: $menu-radius;
    color: $text;
  }

  &:backdrop {
    > arrow,
    > contents {
      box-shadow: $shadow-z2;
    }
  }

  > contents {
    > list,
    > .view,
    > toolbar {
      border-style: none;
      box-shadow: none;
      background-color: transparent;
    }

    > scrolledwindow > viewport > stack > box {
      padding: 0;
    }

    separator {
      background-color: $divider;
      margin: $space-size / 2 0;
    }

    list {
      background-color: transparent;
      padding: 0;

      > row {
        padding: $space-size $space-size * 2;
        margin: 0;
      }

      separator { margin: 0; }
    }

    button, entry, spinbutton { border-radius: $menuitem-radius; }
  }

  // FIXME: Use the popover color instead of transparent as a workaround for .view
  .view:not(:selected),
  toolbar { background-color: $surface; }

  .linked > button:not(.radio) {
    &:first-child { border-radius: $menuitem-radius 0 0 $menuitem-radius; }
    &:last-child { border-radius: 0 $menuitem-radius $menuitem-radius 0; }
    &:only-child { border-radius: $menuitem-radius; }
  }

  modelbutton {
    transition: background-color $duration $ease-out;
    min-height: $menuitem-size - $space-size;
    min-width: $menuitem-size * 2;
    padding: $space-size / 2 $space-size * 1.5;
    border-radius: $menuitem-radius;
    color: $text;
    font: initial;
    text-shadow: none;
    border-spacing: $space-size;
    @extend %button-flat-simple;

    &:focus {
      box-shadow: none;
      outline: none;
    }

    accelerator {
      color: $text-disabled;
      margin-left: $space-size * 5;

      &:disabled {
        color: $divider;
      }
    }

    arrow {
      &.left { -gtk-icon-source: -gtk-icontheme("go-previous-symbolic"); }
      &.right { -gtk-icon-source: -gtk-icontheme("go-next-symbolic"); }
    }
  }

  &.menu button,
  button.model {
    min-height: 32px;
    padding: 0 8px;
    border-radius: $menuitem-radius;
  }

  .osd &,
  &.touch-selection,
  &.magnifier {
    background-color: transparent;

    > arrow,
    > contents {
      @extend %osd;
    }
  }

  &.touch-selection,
  &.magnifier {
    button { @extend %button-on-dark; }
  }

  listview {
    padding: 0;

    > row {
      padding: $space-size $space-size * 2;
      border-radius: $menuitem-radius;
      margin: 0;
    }
  }
}

magnifier {
  background-color: $base;
}

/*************
 * Notebooks *
 *************/

%tabs_tab {
  transition: $transition;
  min-height: $small-size;
  min-width: $small-size;
  padding: $space-size $space-size * 2;
  border-width: 1px;
  border-color: transparent;
  border-style: solid;
  outline: none;
  background-clip: padding-box;
  box-shadow: none;
  color: $text-secondary;
  font-weight: 500;

  &:hover {
    background-color: $solid-border;
    color: $text;
  }

  &:disabled { color: $text-secondary-disabled; }

  &:checked {
    transition: $transition;
    background-color: $base;
    background-clip: padding-box;
    border-color: $solid-border;
    color: $text;
    box-shadow: none;

    &:disabled { color: $text-disabled; }

    &.reorderable-page {
      background-color: $base;
    }
  }
}

notebook {
  background-color: $base;

  frame > paned > & > header,
  &.frame > header { background-color: $base-alt; }

  &.frame {
    border-radius: $corner-radius;
  }

  &.frame frame {
    > border {
      border: none;
      border-radius: $corner-radius;
    }

    > list {
      // @extend %circular_list;

      row.activatable { border-radius: $corner-radius; }
    }
  }

  &:focus tab:checked { box-shadow: none; }

  &.frame > header {
    &.top {
      border-radius: $corner-radius $corner-radius 0 0;
    }

    &.bottom {
      border-radius: 0 0 $corner-radius $corner-radius;
    }

    &.left {
      border-radius: $corner-radius 0 0 $corner-radius;
    }

    &.right {
      border-radius: 0 $corner-radius $corner-radius 0;
    }
  }

  > header {
    border: none;
    background-color: $background;
    padding: 0;

    &.top {
      box-shadow: inset 0 -1px $solid-border;

      > tabs {
        margin: 4px 0 0;

        > tab {
          border-radius: $corner-radius $corner-radius 0 0;
          border-bottom: none;
        }
      }
    }

    &.bottom {
      box-shadow: inset 0 1px $solid-border;

      > tabs {
        margin: 0 0 4px;

        > tab {
          border-radius: 0 0 $corner-radius $corner-radius;
          border-top: none;
        }
      }
    }

    &.left {
      box-shadow: inset -1px 0 $solid-border;

      > tabs {
        margin: 0 0 0 4px;

        > tab {
          border-radius: $corner-radius 0 0 $corner-radius;
          border-right: none;
        }
      }
    }

    &.right {
      box-shadow: inset 1px 0 $solid-border;

      > tabs {
        margin: 0 4px 0 0;

        > tab {
          border-radius: 0 $corner-radius $corner-radius 0;
          border-left: none;
        }
      }
    }

    &.top > tabs > arrow {
      @extend %notebook_vert_arrows;

      border-top-style: none;
    }

    &.bottom > tabs > arrow {
      @extend %notebook_vert_arrows;

      border-bottom-style: none;
    }

    @at-root %notebook_vert_arrows {
      padding-left: 4px;
      padding-right: 4px;

      &.down {
        margin-left: -8px;
        -gtk-icon-source: -gtk-icontheme('pan-start-symbolic');
      }

      &.up {
        margin-right: -8px;
        -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');
      }
    }

    &.left > tabs > arrow {
      @extend %notebook_horz_arrows;

      border-left-style: none;
    }

    &.right > tabs > arrow {
      @extend %notebook_horz_arrows;

      border-right-style: none;
    }

    @at-root %notebook_horz_arrows {
      padding-top: 4px;
      padding-bottom: 4px;

      &.down {
        margin-top: -8px;
        -gtk-icon-source: -gtk-icontheme('pan-up-symbolic');
      }

      &.up {
        margin-bottom: -8px;
        -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
      }
    }

    > tabs > arrow {
      @extend %button-flat-simple;

      min-height: 16px;
      min-width: 16px;
      border-radius: 0;
    }

    tab {
      @extend %tabs_tab;

      // FIXME: The tab node doesn't have :drop(active), instead its child box has it.
      > box {
        transition: background-color $duration $ease-out;
        margin: -$space-size -12px;
        padding: $space-size 12px;

        &:drop(active) {
          background-color: $divider;
          color: $text;
        }
      }

      // colors the button like the label, overridden otherwise
      button.flat {
        @extend %small-button;

        &:last-child {
          margin-left: $space-size;
          margin-right: $space-size - 12px;
        }

        &:first-child {
          margin-left: $space-size - 12px;
          margin-right: $space-size;
        }
      }
    }

    &.top,
    &.bottom {
      tabs {
        padding-left: 8px;
        padding-right: 8px;

        &:not(:only-child) {
          &:first-child { margin-left: 0; }

          &:last-child { margin-right: 0; }
        }

        tab.reorderable-page { border-style: solid; }
      }
    }

    &.left,
    &.right {
      tabs {
        padding-top: 8px;
        padding-bottom: 8px;

        &:not(:only-child) {
          &:first-child { margin-top: 0; }

          &:last-child { margin-bottom: 0; }
        }

        tab.reorderable-page { border-style: solid; }
      }
    }
  }

  > stack:not(:only-child) { // the :not(:only-child) is for "hidden" notebooks
    background-color: transparent;
    border-radius: $corner-radius;
  }
}


/**************
 * Scrollbars *
 **************/
scrollbar {
  $_slider_min_length: 24px;

  transition: $transition;
  background-color: $base;

  // scrollbar border
  &.top { border-bottom: 1px solid $divider; }
  &.bottom { border-top: 1px solid $divider; }
  &.left { border-right: 1px solid $divider; }
  &.right { border-left: 1px solid $divider; }

  > range > trough {
    box-shadow: none;
    outline: none;
    background: none;

    > slider {
      transition: background-color $duration $ease-out;
      min-width: 8px;
      min-height: 8px;
      border: 4px solid transparent;
      border-radius: $circular-radius;
      background-clip: padding-box;
      box-shadow: none;
      outline: none;
      background-color: $text-secondary-disabled;

      &:hover { background-color: $text-disabled; }

      &:active { background-color: $text-secondary; }

      &:disabled { background-color: $text-secondary-disabled; }
    }
  }

  > range.fine-tune {
    > trough > slider {
      min-width: 4px;
      min-height: 4px;
    }

    &.horizontal > trough > slider { margin: 3px; }

    &.vertical > trough > slider { margin: 3px; }
  }

  &.overlay-indicator {
    &:not(.fine-tune) > range > trough > slider {
      transition-property: background-color, min-height, min-width;
    }

    &:not(.dragging):not(.hovering) {
      border-color: transparent;
      background-color: transparent;
      box-shadow: none;
      outline: none;

      > range > trough {
        padding: 0;
        margin: 0;

        > slider {
          min-width: 4px;
          min-height: 4px;
          margin: 3px;
          border: 1px solid rgba($base, 0.3);
          box-shadow: none;
          outline: none;
        }
      }

      button {
        min-width: 4px;
        min-height: 4px;
        margin: 3px;
        border: 1px solid rgba($base, 0.3);
        border-radius: $circular-radius;
        background-color: $text-disabled;
        background-clip: padding-box;
        -gtk-icon-source: none;

        &:disabled { background-color: $text-secondary-disabled; }
      }

      &.horizontal {
        > range > trough > slider { min-width: $_slider_min_length; }

        button { min-width: 8px; }
      }

      &.vertical {
        > range > trough > slider { min-height: $_slider_min_length; }

        button { min-height: 8px; }
      }
    }

    &.dragging,
    &.hovering {
      background-color: rgba($surface, 0.9);

      > range > trough {
        padding: 0;
        margin: 0;

        > slider {
          margin: 3px;
        }
      }
    }
  }

  &.horizontal > range > trough > slider { min-width: $_slider_min_length; }

  &.vertical > range > trough > slider { min-height: $_slider_min_length; }

  // button styling
  button {
    @extend %button-flat-simple;

    min-width: 16px;
    min-height: 16px;
    padding: 0;
    border-radius: 0;
  }

  // button icons
  &.vertical {
    button {
      &.down { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }

      &.up { -gtk-icon-source: -gtk-icontheme('pan-up-symbolic'); }
    }
  }

  &.horizontal {
    button {
      &.down { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic'); }

      &.up { -gtk-icon-source: -gtk-icontheme('pan-start-symbolic'); }
    }
  }
}


/**********
 * Switch *
 **********/
switch {
  transition: all $duration $ease-out;
  margin: $space-size 0;
  padding: 0 2px;
  border: 5px solid transparent;
  border-radius: $circular-radius;
  background-color: $track;
  background-clip: padding-box;
  font-size: 0;
  color: transparent;

  &:checked { background-color: color-mix(in srgb, $primary 50%, transparent); }

  &:disabled { opacity: 0.5; }

  // hide on/off icons for >=3.24.5
  image {
    margin: -8px;
    color: transparent;
  }

  > slider {
    transition: all $duration $ease-out;
    min-width: 20px;
    min-height: 20px;
    margin: -3px -2px;
    border-radius: $circular-radius;
    outline: none;
    box-shadow: 0 0 0 10px transparent, $shadow-z1;
    background-color: $surface;
  }

  &:focus > slider { box-shadow: 0 0 0 10px $overlay-focus, $shadow-z1; }

  &:hover > slider { box-shadow: 0 0 0 10px $overlay-hover, $shadow-z1; }

  &:focus:hover > slider { box-shadow: 0 0 0 10px $overlay-focus-hover, $shadow-z1; }

  &:checked > slider {
    background-color: $primary;
    color: $primary;
  }
}


/*************************
 * Check and Radio items *
 *************************/

checkbutton,
radiobutton {
  outline: none;
  border-spacing: 4px;
}

checkbutton.text-button,
radiobutton.text-button {
  // this is for a nice focus on check and radios text
  padding: $space-size / 2;

  label:not(:only-child) { margin: 0 4px; }

  popover & > check {
    &:dir(ltr) {
      margin-left: -($space-size * 2 + 4px);
    }

    &:dir(rtl) {
      margin-right: -($space-size * 2 + 4px);
    }
  }
}

$check_radio_size: 40px;
$check_radio_icon_size: ($space-size + 6px) * 2;

check,
radio {
  min-height: $check_radio_icon_size;
  min-width: $check_radio_icon_size;
  margin: -($space-size + 2px);
  padding: ($space-size + 2px);
  border: none;

  @extend %button-flat-simple;
  @extend %circular-button;

  &:checked, &:indeterminate {
    color: $check_radio_primary;

    &:disabled { color: $text-secondary-disabled; }
  }

  &:not(:hover):focus { background-color: transparent; }

  popover modelbutton & {
    margin: 0; // this is a workaround for a menu check/radio size allocation issue
    padding: 0;

    &, &:focus, &:hover, &:focus:hover, &:active, &:disabled {
      transition: none; // FIXME: this is a workaround for a popover check/radio long transition issue
      box-shadow: none;
      background: none;
      border: none;
    }

    &:not(:checked):not(:indeterminate):not(:disabled) { color: $text-secondary; }

    &, &:hover, &:disabled {
      box-shadow: none;
    }

    &.left:dir(rtl) {
      margin-left: -12px;
      margin-right: -4px;
    }

    &.right:dir(ltr) {
      margin-left: -4px;
      margin-right: -12px;
    }
  }
}

%check,
check {
  -gtk-icon-size: 24px;
  -gtk-icon-source: -gtk-scaled(-gtk-recolor(url("assets/scalable/unchecked-symbolic.svg")),
                                -gtk-recolor(url("assets/scalable/unchecked-symbolic@2.svg")));

  &:checked {
    -gtk-icon-source: -gtk-scaled(-gtk-recolor(url("assets/scalable/checkbox-checked-symbolic.svg")),
                                  -gtk-recolor(url("assets/scalable/checkbox-checked-symbolic@2.svg")));
  }

  &:indeterminate {
    -gtk-icon-source: -gtk-scaled(-gtk-recolor(url("assets/scalable/mixed-symbolic.svg")),
                                  -gtk-recolor(url("assets/scalable/mixed-symbolic@2.svg")));
  }
}

%radio,
radio {
  -gtk-icon-size: 24px;
  -gtk-icon-source: -gtk-scaled(-gtk-recolor(url("assets/scalable/unchecked-symbolic.svg")),
                                -gtk-recolor(url("assets/scalable/unchecked-symbolic@2.svg")));

  &:checked {
    -gtk-icon-source: -gtk-scaled(-gtk-recolor(url("assets/scalable/radio-checked-symbolic.svg")),
                                  -gtk-recolor(url("assets/scalable/radio-checked-symbolic@2.svg")));
  }

  &:indeterminate {
    -gtk-icon-source: -gtk-scaled(-gtk-recolor(url("assets/scalable/mixed-symbolic.svg")),
                                  -gtk-recolor(url("assets/scalable/mixed-symbolic@2.svg")));
  }
}

%small_check,
popover.menu check {
  min-height: 18px;
  min-width: 18px;
  -gtk-icon-size: 18px;

  -gtk-icon-source: -gtk-scaled(-gtk-recolor(url("assets/scalable/small-unchecked-symbolic.svg")),
                                -gtk-recolor(url("assets/scalable/small-unchecked-symbolic@2.svg")));

  &:checked {
    -gtk-icon-source: -gtk-scaled(-gtk-recolor(url("assets/scalable/small-checkbox-checked-symbolic.svg")),
                                  -gtk-recolor(url("assets/scalable/small-checkbox-checked-symbolic@2.svg")));
  }

  &:indeterminate {
    -gtk-icon-source: -gtk-scaled(-gtk-recolor(url("assets/scalable/small-mixed-symbolic.svg")),
                                  -gtk-recolor(url("assets/scalable/small-mixed-symbolic@2.svg")));
  }
}

%small_radio,
popover.menu radio {
  min-height: 18px;
  min-width: 18px;
  border-image: none;
  -gtk-icon-size: 18px;

  -gtk-icon-source: -gtk-scaled(-gtk-recolor(url("assets/scalable/small-unchecked-symbolic.svg")),
                                -gtk-recolor(url("assets/scalable/small-unchecked-symbolic@2.svg")));

  &:checked {
    -gtk-icon-source: -gtk-scaled(-gtk-recolor(url("assets/scalable/small-radio-checked-symbolic.svg")),
                                  -gtk-recolor(url("assets/scalable/small-radio-checked-symbolic@2.svg")));
  }

  &:indeterminate {
    -gtk-icon-source: -gtk-scaled(-gtk-recolor(url("assets/scalable/small-mixed-symbolic.svg")),
                                  -gtk-recolor(url("assets/scalable/small-mixed-symbolic@2.svg")));
  }
}

// ANIMATION:
// this is made with those pretty convoluted transitions, since checks and radios have to animate only on state changes,
// the transformation is set on the active state and it get reset on the checked state.
// radio:not(:checked):active { -gtk-icon-transform: scale(0); }

treeview.view,
columnview.view {
  check, radio {
    padding: 0;
    box-shadow: none;
    background: none;

    color: $text-secondary;

    &:hover, &:active { color: $text; }

    &:disabled { color: $text-secondary-disabled; }

    &:checked, &:indeterminate { color: $check_radio_primary; }

    &:checked:disabled, &:indeterminate:disabled { color: $text-secondary-disabled; }
  }

  &:hover, &:selected, &:focus, &:focus-within {
    check, radio {
      box-shadow: none;
      background-color: transparent;
    }
  }
}

treeview.view radio:checked {
  -gtk-icon-source: -gtk-recolor(url("assets/scalable/radio-checked-symbolic.svg"));
  border-image: none;
}

// selection-mode
checkbutton.selection-mode {
  border-radius: $circular-radius;

  check, radio {
    padding: $space-size;
    border-radius: $circular-radius;
    -gtk-icon-size: 36px;

    -gtk-icon-source: -gtk-scaled(-gtk-recolor(url("assets/scalable/selection-unchecked-symbolic.svg")),
                                  -gtk-recolor(url("assets/scalable/selection-unchecked-symbolic@2.svg")));

    &:checked {
      -gtk-icon-source: -gtk-scaled(-gtk-recolor(url("assets/scalable/selection-checked-symbolic.svg")),
                                    -gtk-recolor(url("assets/scalable/selection-checked-symbolic@2.svg")));
    }
  }

  label {
    &:dir(ltr) { margin-right: $space-size; }
    &:dir(rtl) { margin-left: $space-size; }
  }
}


/************
 * GtkScale *
 ************/
scale {
  // sizing
  $_marks_length: 8px;
  $_marks_distance: 7px;

  $trough_size: 2px;
  $finetune_trough_size: 4px;

  $slider_size: 32px;

  $slider_margin: -($slider_size - $trough_size) / 2;
  $finetune_slider_margin: -($slider_size - $finetune_trough_size) / 2;

  $color_slider_margin: -($slider_size) * 3 / 4;
  $color_marks_slider_margin: -($slider_size - 16px) - $color_slider_margin;

  min-height: $trough_size;
  min-width: $trough_size;

  &.horizontal { padding: ($medium-size - $trough_size) / 2 12px; }

  &.vertical { padding: 12px ($medium-size - $trough_size) / 2; }

  // click-and-hold the slider to activate
  &.fine-tune {
    &.horizontal {
      min-height: $finetune_trough_size;
      padding-top: ($medium-size - $finetune_trough_size) / 2;
      padding-bottom: ($medium-size - $finetune_trough_size) / 2;
    }

    &.vertical {
      min-width: $finetune_trough_size;
      padding-left: ($medium-size - $finetune_trough_size) / 2;
      padding-right: ($medium-size - $finetune_trough_size) / 2;
    }

    // to make the trough grow in fine-tune mode
    > trough > slider {
      min-height: $slider_size;
      min-width: $slider_size;
      margin: $finetune_slider_margin;
    }
  }

  // the backing bit
  > trough {
    transition: background-color $duration $ease-out;
    outline: none;
    background-color: $track;

    &:disabled { background-color: $track-disabled; }

    > slider {
      transition: background-color $duration $ease-out,
                  background-size $ripple-fade-out-duration $ease-out,
                  background-image $ripple-fade-out-opacity-duration $ease-out;
      background-repeat: no-repeat;
      background-position: center;
      background-size: auto, 1000% 1000%;
      min-height: $slider_size;
      min-width: $slider_size;
      margin: $slider_margin;
      border-radius: 50%;
      color: $primary-fixed;
      background-color: transparent;

      &, &:focus, &:hover, &:active {
        border: none;
        box-shadow: none;
        outline: none;
      }

      @each $s, $as in ('', ''),
                       (':disabled', '-disabled') {
        &#{$s} {
          $_url: 'assets/scale-slider#{$as}#{$asset-suffix}';

          background-image: -gtk-scaled(url('#{$_url}.png'), url('#{$_url}@2.png')),
                            radial-gradient(circle, transparent 10%, transparent 0%);
        }
      }

      &:focus { background-color: $overlay-focus; }

      &:hover { background-color: $overlay-hover; }

      &:focus:hover { background-color: $overlay-focus-hover; }

      &:active {
        $_url: 'assets/scale-slider#{$asset-suffix}';

        transition: background-color $duration $ease-out,
                    background-size 0,
                    background-image 0;
        // animation: ripple-on-slider $ripple-fade-in-duration $ease-out forwards;
        background-image: -gtk-scaled(url('#{$_url}.png'), url('#{$_url}@2.png')),
                          radial-gradient(circle, $overlay-active 10%, transparent 0%);
        background-size: auto, 0% 0%;
        color: $primary-fixed;
      }
    }

    // the colored part of the backing bit
    > highlight {
      transition: background-color $duration $ease-out;
      background-color: $primary-fixed;

      &:disabled {
        background-color: $text-secondary-disabled;
      }
    }

    // this is another differently styled part of the backing bit, the most relevant use case is for example
    // in media player to indicate how much video stream as been cached
    > fill {
      transition: background-color $duration $ease-out;
      background-color: $track;

      &:disabled { background-color: transparent; }
    }
  }

  > marks,
  > value { color: $text-secondary; }

  > marks indicator {
    background-color: $track;
    color: transparent;
  }

  //marks margins
  @each $scale_orient, $marks_class, $marks_pos, $marks_margin in (horizontal, top, top, bottom),
                                                                  (horizontal, bottom, bottom, top),
                                                                  (vertical, top, left, right),
                                                                  (vertical, bottom, right, left) {
    &.#{$scale_orient} marks {
      &.#{$marks_class} {
        margin-#{$marks_margin}: $_marks_distance;
        margin-#{$marks_pos}: -($_marks_distance + $_marks_length);
      }
    }

    &.#{$scale_orient}.fine-tune marks {
      &.#{$marks_class} {
        margin-#{$marks_margin}: $_marks_distance - 1px;
        margin-#{$marks_pos}: -($_marks_distance + $_marks_length - 1px);
      }
    }
  }

  &.horizontal {
    > marks indicator {
      min-height: $_marks_length;
      min-width: 1px;
    }
  }

  &.vertical {
    > marks indicator {
      min-height: 1px;
      min-width: $_marks_length;
    }
  }

  &.marks-before:not(.marks-after),
  &.marks-after:not(.marks-before) {
    > trough > slider {
      transform: none;
      box-shadow: none;
      border: none;

      &:disabled {
        box-shadow: none;
      }
    }
  }

  // *WARNING* scale with marks madness following

  @each $dir_class, $dir_infix in ('horizontal', 'horz'),
                                  ('vertical', 'vert') {
    @each $marks_infix, $marks_class in ('marks-before', 'marks-before:not(.marks-after)'),
                                        ('marks-after', 'marks-after:not(.marks-before)') {
      &.#{$dir_class}.#{$marks_class} {
        > trough > slider {
          @each $state, $state_infix in ('', ''),
                                        (':disabled', '-disabled') {
            &#{$state} {
              $_scale_asset: 'assets/scale-#{$dir_infix}-#{$marks_infix}-slider#{$state_infix}#{$asset-suffix}';

              background-image: -gtk-scaled(url('#{$_scale_asset}.png'), url('#{$_scale_asset}@2.png')),
                                radial-gradient(circle, transparent 10%, transparent 0%);
            }
          }

          &:active {
            $_scale_asset: 'assets/scale-#{$dir_infix}-#{$marks_infix}-slider#{$asset-suffix}';

            background-image: -gtk-scaled(url('#{$_scale_asset}.png'), url('#{$_scale_asset}@2.png')),
                              radial-gradient(circle, $overlay-active 10%, transparent 0%);
          }
        }
      }
    }
  }

  &.color {
    min-height: 0;
    min-width: 0;

    &.horizontal {
      padding: 0 0 12px 0;

      > trough > slider {
        &:dir(ltr), &:dir(rtl) { // specificity bump
          margin-bottom: $color_slider_margin;
          margin-top: $color_marks_slider_margin;
        }
      }
    }

    &.vertical {
      &:dir(ltr) {
        padding: 0 0 0 12px;

        > trough > slider {
          margin-left: $color_slider_margin;
          margin-right: $color_marks_slider_margin;
        }
      }

      &:dir(rtl) {
        padding: 0 12px 0 0;

        > trough > slider {
          margin-right: $color_slider_margin;
          margin-left: $color_marks_slider_margin;
        }
      }
    }
  }
}


/*****************
 * Progress bars *
 *****************/
progressbar {
  // sizing
  &.horizontal {
    trough,
    progress { min-height: $bar-size; }
  }

  &.vertical {
    trough,
    progress { min-width: $bar-size; }
  }

  // FIXME: insensitive state missing and some other state should be set probably
  color: $text-secondary;
  font-size: smaller;

  trough {
    border-radius: $corner-radius;
    background-color: $track-disabled;
  }

  progress {
    border-radius: $corner-radius;
    background-color: $primary;
  }

  &.osd { // progressbar.osd used for epiphany page loading progress
    min-width: $bar-size;
    min-height: $bar-size;
    background-color: transparent;
    box-shadow: none;
    margin: 0;
    padding: 0;

    trough { background-color: transparent; }

    progress { background-color: $primary; }
  }

  trough.empty progress { all: unset; } // makes the progress indicator disappear, when the fraction is 0
}


/*************
 * Level Bar *
 *************/
levelbar {
  &.horizontal {
    block { min-height: $bar-size; }

    &.discrete block {
      min-width: $medium-size;

      &:not(:last-child) { margin-right: 2px; }
    }
  }

  &.vertical {
    block { min-width: $bar-size; }

    &.discrete block {
      min-height: $medium-size;

      &:not(:last-child) { margin-bottom: 2px; }
    }
  }

  // imitate the entry style
  trough {
    // padding: 2px;
    border-radius: $corner-radius;
    // box-shadow: $shadow-z1;
    // background-color: $base;

    // &:disabled { background-color: $base-alt; }
  }

  block {
    &.low { background-color: $warning; }

    &.high,
    &:not(.empty) { background-color: $primary; }

    &.full { background-color: $success; }

    &.empty { background-color: $track-disabled; }
  }
}


/****************
 * Print dialog *
*****************/
window.dialog.print {
  drawing {
    color: $text;
    background: none;
    border: none;
    padding: 0;

    paper {
      padding: 0;
      border: 1px solid $divider;
      background-color: $base;
      color: $text;
    }
  }

  .dialog-action-box { margin: 12px; }
}


/**********
 * Frames *
 **********/

frame,
.frame {
  border: 1px solid $divider;

  > list { border: none; }

  &.view { border-radius: $corner-radius; }

  &.flat { border-style: none; }
}

frame {
  border-radius: $corner-radius;

  > label {
    margin: 4px;
  }

  &.flat > border,
  statusbar & > border { border: none; } // for backward compatibility
}

actionbar {
  box-shadow: none;

  > revealer > box {
    padding: $space-size;
    border-spacing: $space-size;
    border-top: 1px solid $divider;
    background-color: $base;
    background-clip: border-box;
    box-shadow: none;

    &, > box.start, > box.end {
      border-spacing: $space-size;
    }

    entry,
    button,
    menubutton,
    splitbutton { margin: 0; }
  }
}

statusbar {
  padding: $space-size $space-size * 3;
}

scrolledwindow {
  viewport.frame { // avoid double borders when viewport inside scrolled window
    border: none;
  }

  stack &.frame {
    viewport.frame list { border: none; }
  }

  // This is used when content is touch-dragged past boundaries.
  // draws a box on top of the content, the size changes programmatically.
  > overshoot {
    &.top { @include overshoot(top); }

    &.bottom { @include overshoot(bottom); }

    &.left { @include overshoot(left); }

    &.right { @include overshoot(right); }
  }

  // Overflow indication, works similarly to the overshoot, the size if fixed tho.
  &.undershoot-top {
    @include undershoot(top);
  }

  &.undershoot-bottom {
    @include undershoot(bottom);
  }

  &.undershoot-start {
    &:dir(ltr) { @include undershoot(left); }
    &:dir(rtl) { @include undershoot(right); }
  }

  &.undershoot-end {
    &:dir(ltr) { @include undershoot(right); }
    &:dir(rtl) { @include undershoot(left); }
  }

  > junction { // the small square between two scrollbars
    border: none;
    background-color: $base;
  }
}

scrolledwindow > undershoot {
  &.top, &.bottom, &.left, &.right {
    box-shadow: none;
  }
}

// vbox and hbox separators
separator {
  min-width: 1px;
  min-height: 1px;
  background-color: $divider;

  &.spacer {
    background-color: transparent;

    &.horizontal { min-width: $space-size * 2; }
    &.vertical { min-height: $space-size * 2; }
  }
}

%hide_separators {
  min-width: 0;
  min-height: 0;
  background-color: transparent;
}


/*********
 * Lists *
 *********/
listview,
list {
  border-color: $divider;
  background-color: $base;
  background-clip: padding-box;
  color: $text-secondary;

  > row {
    padding: 2px;
    background-clip: padding-box;
  }

  > row.expander { padding: 0px; }
  > row.expander .row-header { padding: 2px; }

  &.horizontal row.separator,
  &.separators.horizontal > row:not(.separator) {
    border-left: 1px solid $divider;
  }

  &:not(.horizontal) row.separator,
  &.separators:not(.horizontal) > row:not(.separator) {
    border-bottom: 1px solid $divider;
  }
}

list.frame { border-radius: $corner-radius; }

listview > header {
  @extend .heading;
  padding: 2px;
  padding-top: $space-size * 3;
  padding-bottom: $space-size;
}

button listview.view {
  background-color: transparent;
}

menubutton.flat > button:checked listview.view {
  > row { color: $text; }
}

list.operations-list {
  > row {
    border-radius: $menuitem-radius;

    &, &:focus {
      background-color: transparent;
    }
  }
}

row {
  background-clip: padding-box;
  color: $text-secondary;

  @at-root %row_activatable, &.activatable {
    color: $text-secondary;
    transition: $transition,
                background-size $ripple-fade-out-duration $ease-out,
                background-image $ripple-fade-out-opacity-duration $ease-out;
    outline: none;
    box-shadow: none;
    background-color: transparent;
    background-image: radial-gradient(circle farthest-corner at center, transparent 30%, transparent 0%);
    background-repeat: no-repeat;
    background-position: center;
    background-size: 1000% 1000%;

    &:focus {
      background-color: $overlay-focus;
      color: $text;
    }

    &:hover {
      transition: $transition,
                  box-shadow 0ms,
                  background-size $ripple-fade-out-duration $ease-out,
                  background-image $ripple-fade-out-opacity-duration $ease-out;
      background-color: $overlay-hover;
      color: $text;
    }

    &.has-open-popup, // this is for indicathing which row generated a popover see https://bugzilla.gnome.org/show_bug.cgi?id=754411
    &:active {
      transition: $transition,
                  background-size 0ms,
                  background-image 0ms;
      animation: ripple $ripple-fade-in-duration $ease-out forwards;
      background-color: $overlay-hover;
      background-image: radial-gradient(circle farthest-corner at center, $overlay-active 30%, transparent 0%);
      background-size: 100% 100%;
      color: $text;
    }
  }

  button.circular {
    @extend %button-flat-simple;
  }

  button &.activatable {
    &, &:hover, &.has-open-popup, &:active, &:active:hover {
      background-color: transparent;
      box-shadow: none;
      background-image: none;
      transition: none;
      animation: none;
    }
  }

  button:checked &.activatable,
  button:checked:hover &.activatable {
    color: $primary-text;
  }

  &:selected {
    background-color: $overlay-selected;
    color: inherit; // for overlays

    button image,
    button label { color: inherit; }

    &:disabled {
      color: $text-disabled;
    }
  }

  &:disabled {
    &, & > .header {
      color: $text-secondary-disabled;
    }
  }
}

treeexpander {
  border-spacing: 4px;
}

columnview {
  // move padding to child cells
  > listview {
    border-spacing: $space-size / 2;
    padding: $space-size / 2 0;

    > row {
      padding: 0;

      // align horizontal sizing with header buttons
      > cell {
        padding: $space-size / 2;

        &:not(:first-child) {
          border-left: 1px solid transparent;
        }
      }
    }
  }

  > header > button {
    padding-left: 6px;
    padding-right: 6px;
    border-left: 1px solid transparent;

    &:first-child {
      border-left-width: 0;
    }
  }

  // make column separators visible when :show-column-separators is true
  &.column-separators {
    > listview > row > cell,
    > header > button {
      border-left-color: $divider;
    }
  }

  > listview:not(.horizontal).separators > row:not(.separator) {
    border-top: 1px solid $divider;
    border-bottom: none;
  }

  // shrink vertically for .data-table
  &.data-table > listview > row > cell {
    padding-top: 2px;
    padding-bottom: 2px;
  }

  ~ undershoot.top {
    box-shadow: none;
  }

  row:not(:selected) cell editablelabel {
    &:not(.editing):focus-within {
      outline: 2px solid $overlay-selected;
    }

    &.editing:focus-within {
      outline: 2px solid $primary;
    }

    &.editing text selection {
      color: $primary-text;
      background-color: $primary;
    }
  }
}

.rich-list { /* rich lists usually containing other widgets than just labels/text */
  > row {
    padding: $space-size * 1.5 $space-size * 2;
    min-height: 32px; /* should be tall even when only containing a label */

    > box {
      border-spacing: $space-size * 2;
    }
  }

  > header {
    padding-left: $space-size * 2;
    padding-right: $space-size * 2;
  }
}

/****************
 * AdwActionRow *
 ****************/

row {
  label.subtitle {
    font-size: smaller;
    @extend .dim-label;
  }

  > box.header {
    margin-left: $space-size * 2;
    margin-right: $space-size * 2;
    min-height: $large-size;

    > .icon:disabled {
      filter: opacity(0.35);
    }

    > box.title {
      margin-top: $space-size;
      margin-bottom: $space-size;
      border-spacing: $space-size / 2;
      padding: 0;

      &,
      > .title,
      > .subtitle {
        padding: 0;
        font-weight: inherit;
      }
    }

    > .prefixes,
    > .suffixes {
      border-spacing: $space-size;
    }
  
    > .icon,
    > .prefixes {
      &:dir(ltr) { margin-right: $space-size; }
      &:dir(rtl) { margin-left: $space-size; }
    }
  }

  &.property > box.header > box.title > {
    .title {
      font-size: smaller;
      @extend .dim-label;
    }

    .subtitle {
      font-size: inherit;
      opacity: 1;
    }
  }

  &.property.monospace {
    font-family: inherit;

    & > box.header > box.title > .subtitle {
      font-family: monospace;
    }
  }
}

/******************************
 * AdwEntryRow and AdwSpinRow *
 ******************************/

row.entry {
  &:disabled {
    text {
      opacity: 0.45;
    }

    .dim-label, .subtitle {
      opacity: 1;
    }
  }

  .edit-icon, .indicator {
    min-width: 24px;
    min-height: 24px;
    padding: $space-size;
  }

  .edit-icon:disabled {
    opacity: 0.5;
  }

  .indicator {
    opacity: 0.65;
  }

  &.monospace {
    font-family: inherit;

    text {
      font-family: monospace;
    }
  }
}

row.spin {
  spinbutton {
    background: none;
    box-shadow: none;
    border-spacing: $space-size;

    &, &:focus &:focus-within {
      outline: none;
      background: none;
    }

    > button.image-button.up:not(.flat):not(.raised):not(.suggested-action):not(.destructive-action):not(.opaque):last-child,
    > button.image-button.down:not(.flat):not(.raised):not(.suggested-action):not(.destructive-action):not(.opaque) {
      &, &:dir(ltr):last-child, &:dir(rtl):first-child {
        @extend %button-basic;
        @extend %circular-button;
        min-width: $menuitem-size;
        min-height: $menuitem-size;
        padding: 0;
        margin: $space-size 2px;
        border: none;
      }
    }
  }

  &:disabled spinbutton {
    > button.image-button.up:not(.flat):not(.raised):not(.suggested-action):not(.destructive-action):not(.opaque):last-child,
    > button.image-button.down:not(.flat):not(.raised):not(.suggested-action):not(.destructive-action):not(.opaque) {
      &, &:dir(ltr):last-child, &:dir(rtl):first-child {
        &:disabled {
          filter: none;
        }
      }
    }
  }
}

row.entry,
row.spin {
  &:not(:selected).activatable.focused:hover,
  &:not(:selected).activatable.focused:active {
    background-color: transparent;
  }

  @each $e_type in error, warning, success {
    &.#{$e_type} {
      color: $primary;

      .dim-label, .subtitle {
        opacity: 1;
      }
    }
  }
}

/***************
 * AdwComboRow *
 ***************/

row.combo {
  image.dropdown-arrow:disabled {
    filter: opacity(0.45);
  }

  listview.inline {
    background: none;
    border: none;
    box-shadow: none;
    color: inherit;

    &, &:disabled {
      background: none;
      color: inherit;
    }
  }

  popover > contents {
    min-width: 120px;

    .combo-searchbar {
      margin: $space-size;

      + scrolledwindow {
        @include undershoot(top);
      }
    }
  }
}

/******************
 * AdwExpanderRow *
 ******************/

@mixin margin-start($margin) {
  &:dir(ltr) {
    margin-left: $margin;
  }

  &:dir(rtl) {
    margin-right: $margin;
  }
}

$boxed-radius: $corner-radius - 1px;

%boxed_list_row {
  transition: 200ms $ease-out;
  color: $text-secondary;
  border-bottom: 1px solid $divider;

  .osd &:focus:focus-visible {
    outline-color: $overlay-focus;
  }
}

row.expander {
  // Drop transparent background on expander rows to let nested rows handle it,
  // avoiding double highlights.
  background: none;
  padding: 0px;

  > box > list {
    background: none;
    color: inherit;
  }

  list.nested {
    background-color: $base;
    color: inherit;
  }

  list.nested > row {
    @extend %boxed_list_row;
  }

  // AdwExpanderRow arrow rotation
  image.expander-row-arrow {
    transition: 200ms $ease-out;
    @include margin-start(6px);
  }

  &:checked image.expander-row-arrow {
    -gtk-icon-transform: rotate(0turn);
  }

  &:not(:checked) image.expander-row-arrow {
    @extend .dim-label;

    &:dir(ltr) {
      -gtk-icon-transform: rotate(0.5turn);
    }

    &:dir(rtl) {
      -gtk-icon-transform: rotate(-0.5turn);
    }
  }

  &:checked image.expander-row-arrow:not(:disabled) {
    color: $primary;
  }

  .osd &:checked image.expander-row-arrow:not(:disabled) {
    color: inherit;
  }

  image.expander-row-arrow:disabled {
    filter: opacity(0.35);
  }
}

/***************
 * AdwButtonRow *
 ***************/

row.button {
  > box {
    margin-left: $space-size * 2;
    margin-right: $space-size * 2;
    border-spacing: $space-size;
    min-height: $large-size - 6px;

    > .icon:disabled {
      filter: opacity(0.45);
    }
  }

  .title {
    @extend .heading;
  }

  &.suggested-action {
    color: $primary;
  }

  &.destructive-action {
    color: $destructive;
  }
}

/*****************
 * Boxed Lists *
 *****************/

// Deprecated: use .boxed-list instead
list.content,
list.boxed-list {
  @extend %card;

  > row {
    // Regular rows and expander header rows background
    &, &.expander row.header {
      @extend %boxed_list_row;
    }

    &.expander {
      border: none;
    }

    // Rounded top
    &:first-child {
      &, &.expander row.header {
        border-top-left-radius: $boxed-radius;
        border-top-right-radius: $boxed-radius;
      }
    }

    // Rounded bottom
    &:last-child, &:only-child {
      &,
      &.expander:not(:checked),
      &.expander:not(:checked) row.header,
      &.expander:checked list.nested,
      &.expander:checked list.nested > row:last-child {
        border-bottom-left-radius: $boxed-radius;
        border-bottom-right-radius: $boxed-radius;
        border-bottom-width: 0;
      }
    }
  }
}

list.boxed-list-separate {
  background: none;
  color: $text;

  > row {
    @extend %card;

    &:selected {
      background-color: $overlay-selected;
    }

    border: none;
    margin-bottom: $space-size * 2;

    &:last-child {
      margin-bottom: 0;
    }

    &:not(.expander) {
      &:not(:selected).activatable {
        &:hover {
          background-color: $base;
          background-image: image($overlay-hover);
        }

        &:active {
          background-color: $base;
          background-image: image($overlay-active);
        }

        &.has-open-popup {
          background-color: $base;
          background-image: image($overlay-normal);
        }
      }
    }

    &.entry, &.spin {
      &:not(:selected).activatable.focused:hover,
      &:not(:selected).activatable.focused:active {
        background-color: $base;
        background-image: none;
      }
    }

    &.expander {
      row.header {
        @extend %boxed_list_row;
        border-top-left-radius: $corner-radius;
        border-top-right-radius: $corner-radius;
      }

      &:not(:checked) row.header,
      &.expander:checked list.nested,
      &.expander:checked list.nested > row:last-child {
        border-bottom-left-radius: $corner-radius;
        border-bottom-right-radius: $corner-radius;
        border-bottom: none;
      }
    }
  }
}

/*********************
 * App Notifications *
 *********************/
.app-notification {
  @extend %toolbar_osd;
  margin: $space-size * 1.5;
  border-spacing: $space-size * 1.5;
  padding: $space-size * 1.5;
  border: none;
  background-image: none;

  button {
    @extend %button-flat;

    &.text-button:not(:disabled) { color: $primary; }
  }

  &.frame,
  border { border-style: none; }
}


/*************
 * Expanders *
 *************/
expander {
  transition: all $duration $ease-out;
  min-width: 16px;
  min-height: 16px;
  color: $text-secondary;
  -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');

  &:dir(rtl) { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic-rtl'); }

  &:hover, &:active { color: $text; }

  &:checked { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }

  &:disabled { color: $text-secondary-disabled; }
}

expander-widget {
  > box > title {
    border-radius: $corner-radius;

    &:hover > expander {
      color: $text-secondary; //only lightens the icon
    }
  }
}

.navigation-sidebar,
placessidebar,
stackswitcher,
expander-widget {
  &:not(decoration):not(window):drop(active):focus,
  &:not(decoration):not(window):drop(active) {
    box-shadow: none;
  }
}


/************
 * Calendar *
 ************/
calendar {
  padding: 0;
  border: 1px solid $divider;
  border-radius: $corner-radius;
  color: $text;

  &:disabled { color: $text-disabled; }

  &:selected {
    @extend %selected_items;

    border-radius: $corner-radius;
  }

  > header {
    padding: $space-size / 2;
    border-bottom: 1px solid $divider;

    > button {
      min-height: $small-size;

      @extend %button-flat-simple;
    }
  }

  > grid {
    margin: $space-size / 2;

    > label {
      border-radius: $circular-radius;
      margin: 0;
    }

    > label.today {
      @extend %selected_items_color;

      &:selected {
        box-shadow: none;
        @extend %selected_items_primary;
      }
    }

    > label:focus {
      outline-style: none;
    }

    > label.day-number {
      padding: $space-size*1.5;

      &:selected {
        @extend %selected_items;
      }
    }

    > label.day-number.other-month {
      color: gtkalpha(currentColor, 0.3);
    }
  }
}


/***********
 * Dialogs *
 ***********/
window.dialog.message { // Message Dialog styling
  &.background {
    background-color: $surface;
    background-image: none;
  }

  box.dialog-vbox.vertical {
    border-spacing: 10px;
  }

  .titlebar {
    min-height: $small-size;
    border-style: none;
    box-shadow: inset 0 1px highlight($surface);
    background-color: $surface;
    color: $text;

    &:backdrop {
      background-color: $surface;
      color: $text-secondary;
    }
  }

  &.csd { // rounded bottom border styling for csd version
    .dialog-action-area {
      // margin-top: -$space-size;
      padding: $space-size;
      border: none;
      box-shadow: none;

      > button {
        @extend %button-flat;
        border: none;
        box-shadow: none;

        &, &:first-child, &:last-child { border-radius: $circular-radius; }

        &:not(:last-child) { margin-right: $space-size; }

        &:not(:disabled) { color: $primary; }

        // &.suggested-action:not(:disabled) { color: $suggested; }

        &.destructive-action:not(:disabled) { color: $destructive; }
      }
    }
  }
}

window.messagedialog {
  .message-area {
    separator {
      background-color: transparent;
      min-height: 0;
    }
  }

  .response-area {
    padding: $space-size;
    box-shadow: none;
    border: none;

    button {
      @extend %button-flat;
      border: none;
      box-shadow: none;
      border-radius: $circular-radius;

      &:not(:last-child) { margin-right: $space-size; }

      &.suggested:not(:disabled) { color: $suggested; }

      &.destructive:not(:disabled) { color: $destructive; }
    }

    separator {
      background-color: transparent;
      min-width: 0;
    }
  }
}

filechooser {
  .dialog-action-box { border-top: 1px solid $divider; }

  #pathbarbox {
    border-bottom: 1px solid $divider;
    background-color: $background;

    > stack > box > button { // The new folder button
      @extend %button-flat;
      @extend %circular-button;
    }
  }

  stack.view {
    frame > border { border: none; }
  }

  gridview {
    @include undershoot(top, $frame, true);
  }

  placesview {
    > stack > scrolledwindow {
      @include undershoot(bottom);
    }
  }
}

filechooserbutton > button > box {
  border-spacing: $space-size;
}

filechooserbutton:drop(active) {
  box-shadow: none;
  border-color: transparent;
}

// aboutdialog
window.aboutdialog {
  stack scrolledwindow.frame {
    &,
    & > .view,
    & > .view > text {
      border-radius: $window-radius - $space-size;
    }
  }

  .large-icons {
    -gtk-icon-size: 128px;
  }
}

window.about {
  .top-bar {
    background-color: transparent;
    box-shadow: none;
  }

  headerbar {
    color: $text-secondary;
    
    &, &:backdrop {
      background-color: transparent;
      box-shadow: inset 0 1px highlight($titlebar);
    }

    @if $mac_style == 'true' {
      button:not(.suggested-action):not(.destructive-action):not(.close):not(.maximize):not(.minimize) {
        @extend %titlebar-button-reset;
      }
    } @else {
      button:not(.suggested-action):not(.destructive-action) {
        @extend %titlebar-button-reset;
      }
    }
  }
}

/***********
 * Sidebar *
 ***********/
.sidebar {
  border-style: none;
  background-color: $base-alt;

  &:not(separator) {
    @at-root %sidebar_left,
    &:dir(ltr),
    &.left,
    &.left:dir(rtl) {
      border-right: 1px solid $divider;
      border-left-style: none;
    }

    @at-root %sidebar_right,
    &:dir(rtl),
    &.right {
      border-left: 1px solid $divider;
      border-right-style: none;
    }
  }

  listview.view,
  list { background-color: transparent; }

  paned & { &.left, &.right, &.left:dir(rtl), &:dir(rtl), &:dir(ltr), & { border-style: none; }}
}

stacksidebar {
  + separator.vertical,
  separator.horizontal { @extend %hide_separators; }

  .sidebar-pane &.sidebar,
  leaflet.unfolded > box > &.sidebar {
    border: none;
  }

  list {
    padding: $space-size;
    background-color: $base-alt; // This should not be necessary, but the parent stacksidebar ignores background-color.
  }

  row {
    min-height: $small-size;
    padding: $space-size $space-size * 1.5;
    border-radius: $corner-radius / 2;

    &:selected {
      @extend %selected_items_color;
      font-weight: 500;
    }

    + row { margin-top: 4px; }

    > label {
      padding-left: $space-size;
      padding-right: $space-size;
      color: inherit;
    }

    &.needs-attention > label { @extend %needs-attention; }
  }
}

separator.sidebar {
  background-color: $divider;
  border-right: none;

  &.selection-mode,
  .selection-mode & {
    background-color: rgba(white, 0.15);
  }

  &.spacer {
    background-color: transparent;
  }
}


/**********************
 * Navigation Sidebar *
 **********************/

.navigation-sidebar {
  padding: $space-size 0; //only vertical padding. horizontal row size would clip
  border-right: none;

  &, &.view, &.view:disabled {
    background-color: transparent;
    color: inherit;
  }

  &.background {
    &, &:disabled {
      background-color: $background;
      color: $text;
    }
  }

  > row {
    min-height: $medium-size;
    padding: 0 $space-size * 1.5;
    border-radius: 0 $circular-radius $circular-radius 0;
    margin: 0 $space-size 0 0;

    &:hover,
    &:focus-visible:focus-within {
      background-color: $overlay-hover;
    }

    &:selected {
      background-color: $overlay-checked;
      color: $primary;

      &:hover {
        background-color: $overlay-focus-hover;
      }

      &:focus-visible:focus-within {
        outline: none;
        background-color: $overlay-focus;
        &:hover { background-color: $overlay-focus-hover; }
      }
    }

    &:disabled { color: $text-disabled; }
  }

  > separator { margin: $space-size 0; }
}

/****************
 * File chooser *
 ****************/

placessidebar {
  > viewport.frame { border-style: none; }

  .navigation-sidebar {
    padding: $space-size 0;

    > row {
      // Needs overriding of the GtkListBoxRow padding
      min-height: 32px;
      margin: 0 4px 0 0; // Remove unwanted hard-coded vertical margins with -1px
      padding: $space-size / 2;
      border-radius: 0 $circular_radius $circular_radius 0;

      // Using margins/padding directly in the SidebarRow
      // will make the animation of the new bookmark row jump
      > revealer { padding: 0 8px 0 16px; }

      &:selected {
        background-color: $overlay-checked;
        color: $primary;
        font-weight: 500;
      }

      &:disabled { color: $text-disabled; }

      image.sidebar-icon {
        &:dir(ltr) { padding-right: 8px; }
        &:dir(rtl) { padding-left: 8px; }
      }

      label.sidebar-label {
        color: inherit;

        &:dir(ltr) { padding-right: 2px; }
        &:dir(rtl) { padding-left: 2px; }
      }

      button.sidebar-button {
        @extend %button-flat-simple;
        @extend %small-button;
      }

      &.sidebar-placeholder-row { background-color: $overlay-hover; }

      &.sidebar-new-bookmark-row {
        color: $primary;
      }

      &:drop(active) {
        background-color: $overlay-hover;
      }
    }
  }
}

placesview {
  .server-list-button > image {
    transition: 200ms $ease-out;
    -gtk-icon-transform: rotate(0turn);
  }

  .server-list-button:checked > image {
    transition: 200ms $ease-out;
    -gtk-icon-transform: rotate(-0.5turn);
  }

  // this selects the "connect to server" label
  > actionbar > revealer > box > label {
    border-spacing: $space-size;
  }
}

// Fr sidebar

.fr-sidebar {
  > row:not(.fr-sidebar-row) {
    background-color: transparent;
  }

  > row.fr-sidebar-row {
    padding: $space-size $space-size * 1.5;
  }
}


/*********
 * Paned *
 *********/
paned {
  > separator {
    min-width: 1px;
    min-height: 1px;
    -gtk-icon-source: none; // defeats the ugly default handle decoration
    border-style: none; // just to be sure
    background-color: transparent;
    // workaround, using background istead of a border since the border will get rendered twice (?)
    background-image: image($divider);
    background-size: 1px 1px;
    background-clip: content-box; // avoids borders image being rendered twice (?)
    box-shadow: none;

    &.wide {
      min-width: 6px;
      min-height: 6px;
      background-color: $background;
      background-image: image($divider), image($divider);
      background-size: 1px 1px, 1px 1px;
    }
  }

  &.horizontal > separator {
    background-repeat: repeat-y;

    &:dir(ltr) {
      margin: 0 -8px 0 0;
      padding: 0 8px 0 0;
      background-position: left;
    }

    &:dir(rtl) {
      margin: 0 0 0 -8px;
      padding: 0 0 0 8px;
      background-position: right;
    }

    &.wide {
      margin: 0;
      padding: 0;
      background-repeat: repeat-y, repeat-y;
      background-position: left, right;
    }
  }

  &.vertical > separator {
    margin: 0 0 -8px 0;
    padding: 0 0 8px 0;
    background-repeat: repeat-x;
    background-position: top;

    &.wide {
      margin: 0;
      padding: 0;
      background-repeat: repeat-x, repeat-x;
      background-position: bottom, top;
    }
  }
}


/************
 * GtkVideo *
 ************/

video {
  & image.osd {
    min-width: 64px;
    min-height: 64px;
    border-radius: $circular-radius;
    border: none;
  }

  background: black;
  border-radius: $corner-radius;
}

/**************
 * GtkInfoBar *
 **************/
infobar {
  border: none;
  margin-bottom: 0;

  > revealer > box {
    padding: $space-size;
    border-spacing: $space-size * 2;
  }

  &.info {
    & > revealer > box,
    &:hover > revealer > box,
    &:backdrop > revealer > box {
      color: $text;
      background-color: $base;

      button {
        &.text-button:not(.suggested-action):not(.destructive-action):not(:disabled) { color: $primary; }
      }
    }
  }

  &.action,
  &.question {
    & > revealer > box,
    &:backdrop > revealer > box {
      background-color: $primary;
      color: $primary-text;

      button {
        &, &:hover, &:focus, &:active, &:checked, &.text-button:not(:disabled) { color: $primary-text; }
      }

      *:link { color: $primary-text; }
    }

    &:hover > revealer > box {
      background-color: $divider;
      background-image: image($primary);
    }
  }

  &.warning {
    & > revealer > box,
    &:backdrop > revealer > box {
      background-color: $warning;
      color: on($warning);

      button {
        @extend %button-on-dark;

        &, &:hover, &:focus, &:active, &:checked, &.text-button:not(:disabled) { color: on($warning); }
      }

      *:link { color: on($warning); }
    }

    &:hover > revealer > box {
      background-color: if($variant == 'light', lighten($warning, 5%), darken($warning, 5%));
    }
  }

  &.error {
    & > revealer > box,
    &:backdrop > revealer > box {
      background-color: $error;
      color: on($error);

      button {
        &, &:hover, &:focus, &:active, &:checked, &.text-button:not(:disabled) { color: on($error); }
      }

      *:link { color: on($error); }
    }

    &:hover > revealer > box {
      background-color: if($variant == 'light', lighten($error, 5%), darken($error, 5%));
    }
  }
}


/************
 * Tooltips *
 ************/
tooltip {
  &.background, &.background.csd {
    // background-color needs to be set this way otherwise it gets drawn twice
    // see https://bugzilla.gnome.org/show_bug.cgi?id=736155 for details.
    background-color: $tooltip;
    color: on($tooltip);
    box-shadow: $shadow-z4;
    border-radius: $corner-radius / 2;
    margin: 2px 6px 8px 6px;
    border: none;
  }

  padding: $space-size $space-size * 2;
  box-shadow: none; // otherwise it gets inherited by windowframe.csd

  > box {
    border-spacing: $space-size;
  }
}


/*****************
 * Color Chooser *
 *****************/
colorswatch {
  // This widget is made of two boxes one on top of the other, the lower box is colorswatch {} the other one
  // is colorswatch overlay {}, colorswatch has the programmatically set background, so most of the style is
  // applied to the overlay box.

  // base color corners rounding
  // to avoid the artifacts caused by rounded corner anti-aliasing the base color
  // sports a bigger radius.
  // nth-child is needed by the custom color strip.

  &.top {
    border-top-left-radius: $menu-radius;
    border-top-right-radius: $menu-radius;

    overlay {
      border-top-left-radius: $menu-radius;
      border-top-right-radius: $menu-radius;
    }
  }

  &.bottom {
    border-bottom-left-radius: $menu-radius;
    border-bottom-right-radius: $menu-radius;

    overlay {
      border-bottom-left-radius: $menu-radius;
      border-bottom-right-radius: $menu-radius;
    }
  }

  &.left,
  &:first-child:not(.top) {
    border-top-left-radius: $menu-radius;
    border-bottom-left-radius: $menu-radius;

    overlay {
      border-top-left-radius: $menu-radius;
      border-bottom-left-radius: $menu-radius;
    }
  }

  &.right,
  &:last-child:not(.bottom) {
    border-top-right-radius: $menu-radius;
    border-bottom-right-radius: $menu-radius;

    overlay {
      border-top-right-radius: $menu-radius;
      border-bottom-right-radius: $menu-radius;
    }
  }

  &.dark { color: on(dark); }

  &.light { color: on(light); }

  &#add-color-button {
    border-radius: $menu-radius $menu-radius 0 0;
    color: $text;

    &:only-child { border-radius: $menu-radius; }

    overlay {
      background-color: $surface;
    }
  }

  &:disabled {
    opacity: 0.5;

    overlay { box-shadow: none; }
  }

  &#editor-color-sample {
    border-radius: $menu-radius;

    overlay { border-radius: $menu-radius; }
  }
}

// colorscale popup
colorchooser .popover.osd {
  transition: $transition-shadow;
  border-radius: $corner-radius;
  box-shadow: $shadow-z4, inset 0 1px highlight($surface);
  background-color: $surface;

  &:backdrop { box-shadow: $shadow-z2, inset 0 1px highlight($surface); }
}


/********
 * Misc *
 ********/
// content view (grid/list)
.content-view {
  background-color: $background;

  // &:hover { -gtk-icon-effect: highlight; }

  rubberband, .rubberband { @extend rubberband; }
}

// .scale-popup {
// }


/**********************
 * Window Decorations *
 **********************/
window {
  border: none;

  &.csd {
    outline: none;
    padding: 0;
    margin: 0;
    transition: none;
    border-radius: $window-radius;

    @if $variant == 'light' and $topbar == 'dark' {
      box-shadow: $shadow-z16, 0 16px 16px 2px transparent, 0 6px 18px 5px transparent, inset 0 1px $titlebar;
    } @else {
      box-shadow: $shadow-z16, 0 16px 16px 2px transparent, 0 6px 18px 5px transparent;
    }

    &:backdrop {
      // the transparent shadow here is to enforce that the shadow extents don't
      // change when we go to backdrop, to prevent jumping windows.
      // The biggest shadow should be in the same order then in the active state
      // or the jumping will happen during the transition.
      transition: $transition-shadow;

      @if $variant == 'light' and $topbar == 'dark' {
        box-shadow: $shadow-z4, 0 16px 16px 2px transparent, 0 6px 18px 5px transparent, inset 0 1px $titlebar-backdrop;
      } @else {
        box-shadow: $shadow-z4, 0 16px 16px 2px transparent, 0 6px 18px 5px transparent;
      }
    }

    // &.messagedialog { }

    @if $variant == 'light' and $topbar == 'dark' {
      &.about, &.messagedialog, &.message {
        box-shadow: $shadow-z16, 0 16px 16px 2px transparent, 0 6px 18px 5px transparent;
  
        &:backdrop {
          box-shadow: $shadow-z4, 0 16px 16px 2px transparent, 0 6px 18px 5px transparent;
        }
      }
    }

    &.tiled,
    &.tiled-top,
    &.tiled-left,
    &.tiled-right,
    &.tiled-bottom {
      border-radius: 0;
      outline: none;
    }
  
    &.maximized,
    &.fullscreen {
      border-radius: 0;
      outline: none;
      box-shadow: none;
      transition: none;
    }

    &.ssd-frame {
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
    }
  }

  &.solid-csd {
    margin: 0;
    padding: 2px;
    border-radius: 0;
    box-shadow: none;
    background-color: $titlebar;

    &:backdrop { background-color: $titlebar-backdrop; }
  }

  // server-side decorations as used by mutter
  &.ssd {
    // just doing borders, wm draws actual shadows
    box-shadow: 0 0 0 1px $border;
  }
}

// catch all extend :)
%selected_items {
  background-color: $overlay-selected;
}

%selected_items_color {
  color: $primary;
  background-color: color-mix(in srgb, $primary 20%, transparent);
}

%selected_items_primary {
  color: $primary-text;
  background-color: $primary;
}

.monospace { font-family: monospace; }

.numeric {
  font-feature-settings: "tnum";
}

/**********************
 * Touch Copy & Paste *
 **********************/
// touch selection handlebars for the Popover.osd above
cursor-handle {
  color: $primary;
  -gtk-icon-source: -gtk-recolor(url("assets/scalable/cursor-handle-symbolic.svg"));

  &.insertion-cursor:dir(ltr), &.insertion-cursor:dir(rtl) {
    padding-top: 6px;
  }
}

// shortcut window keys
shortcuts-section {
  margin: 20px;
}

.shortcuts-search-results {
  margin: 20px;
  border-spacing: 24px;
}

shortcut {
  border-spacing: 6px;
}

shortcut > .keycap {
  min-width: 28px - 8px * 2;
  min-height: 28px - 2px;
  margin-top: 2px;
  padding-bottom: 2px;
  padding-left: 8px;
  padding-right: 8px;
  border: solid 1px $divider;
  border-radius: 8px;
  box-shadow: inset 0 -2px $divider;
  background-color: $surface;
  background-clip: border-box;
  color: $text;
  font-size: smaller;
}

:not(decoration):not(window):drop(active) { // FIXME needs to be done widget by widget, this wildcard should really die
  caret-color: $primary;
}

stackswitcher {
  min-height: 0;
  padding: 0;
  // margin: $space-size 0;
  border-radius: $circular-radius;
  background-color: $overlay-normal;

  &.linked:not(.vertical) > button:not(.suggested-action):not(.destructive-action) {
    margin: 0 0;
    border-radius: $circular-radius;
    @extend %button-flat-simple;

    &.text-button { min-width: 100px; }

    &:checked {
      background-color: $primary;
      color: $primary-text;
    }
  }

  button.text-button { min-width: 100px; } // FIXME aggregate with buttons

  &.circular {
    border-spacing: $space-size * 2;

    button.circular,
    button.text-button.circular { // FIXME aggregate with buttons
      min-width: $medium-size;
      min-height: $medium-size;
      padding: 0;
    }
  }
}


/*************
 * App Icons *
 *************/
// Outline for low res icons
.lowres-icon {
  -gtk-icon-shadow: none;
}

// Drapshadow for large icons
.icon-dropshadow {
  -gtk-icon-shadow: none;
}


/*********
 * Emoji *
 *********/
popover.emoji-picker {
  padding: 0;

  > contents {
    padding: 0;
  }
}

.emoji-searchbar {
  padding: $space-size;
  border-spacing: $space-size;
  border-bottom: 1px solid $divider;
  background: none;

  entry {
    margin: 0;

    text {
      background: none;
      box-shadow: none;
    }
  }
}

.emoji-toolbar {
  padding: 0;
  border-spacing: $space-size / 2;
  border-top: 1px solid $divider;
  background: none;
  box-shadow: none;
}

button.emoji-section {
  margin: 0;
  padding: $space-size;
  border-radius: $corner-radius -$space-size / 2;

  &:checked {
    color: $primary;
  }
}

popover.emoji-picker emoji {
  font-size: x-large;
  padding: $space-size;
  transition: $transition;
  border-radius: $corner-radius;

  &:focus,
  &:hover {
    background: $overlay-hover;
  }
}

emoji-completion-row {
  min-height: $menuitem-size;
  padding: 0 $space-size * 2;

  > box {
    border-spacing: $space-size;
    padding: 2px $space-size;
  }

  &:focus, &:hover,
  emoji:hover, emoji:focus {
    background-color: $overlay-hover;
    color: $text;
  }
}

popover.entry-completion > contents {
  padding: 0;
}
